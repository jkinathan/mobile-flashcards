{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport { getDeck } from \"../utilities/api\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Styles from \"../utilities/styles\";\nimport { setLocalNotification, clearLocalNotification } from \"../utilities/helpers\";\n\nvar StartQuiz = function (_React$Component) {\n  _inherits(StartQuiz, _React$Component);\n\n  var _super = _createSuper(StartQuiz);\n\n  function StartQuiz(props) {\n    var _this;\n\n    _classCallCheck(this, StartQuiz);\n\n    _this = _super.call(this, props);\n\n    _this.flipQA = function () {\n      _this.setState(function (prevState) {\n        return {\n          showQuestion: !prevState.showQuestion,\n          correct: prevState.correct,\n          indexAt: prevState.indexAt,\n          questions: prevState.questions\n        };\n      });\n    };\n\n    _this.markAsCorrect = function () {\n      _this.setState(function (prevState) {\n        return {\n          correct: prevState.correct + 1,\n          indexAt: prevState.indexAt + 1,\n          questions: prevState.questions,\n          showQuestion: true\n        };\n      });\n    };\n\n    _this.pushIncorrect = function () {\n      _this.setState(function (prevState) {\n        return {\n          indexAt: prevState.indexAt + 1,\n          showQuestion: true,\n          correct: prevState.correct,\n          questions: prevState.questions\n        };\n      });\n    };\n\n    _this.state = {\n      questions: null,\n      correct: 0,\n      indexAt: 0,\n      showQuestion: true\n    };\n    return _this;\n  }\n\n  _createClass(StartQuiz, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var route = this.props.route;\n      var deckID = route.params.deck.title;\n      getDeck(deckID).then(function (deckk) {\n        var questions = deckk.questions;\n\n        _this2.setState({\n          questions: questions\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      if (this.state.questions === null || this.state.questions === undefined) {\n        return null;\n      } else if (this.state.questions.length === 0) {\n        return React.createElement(View, null, React.createElement(Text, null, \"There is no question card in the current deck :(\"));\n      } else if (this.state.questions.length !== this.state.indexAt) {\n        var question = this.state.questions[this.state.indexAt];\n        return React.createElement(View, null, React.createElement(Text, null, \"Your Progress \", this.state.indexAt + 1, \" of \", this.state.questions.length), React.createElement(Text, null, this.state.showQuestion ? question.question : question.answer), React.createElement(Button, {\n          title: this.state.showQuestion ? 'Show Answer' : 'Show Question',\n          onPress: this.flipQA\n        }), React.createElement(Button, {\n          title: 'Correct',\n          onPress: this.markAsCorrect\n        }), React.createElement(Button, {\n          title: 'Incorrect',\n          onPress: this.pushIncorrect\n        }));\n      } else {\n        clearLocalNotification();\n        setLocalNotification();\n        return React.createElement(View, null, React.createElement(Text, null, \"You have successfully completed the deck questions!\"), React.createElement(Text, null, \"Score: You have answered \", Math.round(this.state.correct / this.state.questions.length * 100), \"% Correct!\"), React.createElement(Button, {\n          title: 'Restart Quiz',\n          onPress: function onPress() {\n            _this3.setState({\n              correct: 0,\n              indexAt: 0,\n              showQuestion: true\n            });\n          }\n        }), React.createElement(Button, {\n          title: 'Back to Deck',\n          onPress: function onPress() {\n            _this3.props.navigation.navigate('DeckDetail', {\n              deck: _this3.props.route.params.deck\n            });\n          }\n        }));\n      }\n    }\n  }]);\n\n  return StartQuiz;\n}(React.Component);\n\nexport { StartQuiz as default };","map":{"version":3,"sources":["/home/kinathan/Desktop/retribution/mobile-flashcards/components/Quiz.js"],"names":["React","getDeck","Styles","setLocalNotification","clearLocalNotification","StartQuiz","props","flipQA","setState","prevState","showQuestion","correct","indexAt","questions","markAsCorrect","pushIncorrect","state","route","deckID","params","deck","title","then","deckk","undefined","length","question","answer","Math","round","navigation","navigate","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { getDeck } from \"../utilities/api\";\nimport {Button, Text, View} from \"react-native\";\nimport Styles from \"../utilities/styles\";\nimport { setLocalNotification,clearLocalNotification } from \"../utilities/helpers\";\n\nexport default class StartQuiz extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            questions: null,\n            correct: 0,\n            indexAt: 0,\n            showQuestion: true,\n        }\n    }\n\n    componentDidMount() {\n        const { route} = this.props;\n\n        const deckID = route.params.deck.title;\n        \n        getDeck(deckID).then((deckk) => {\n\n                const questions = deckk.questions;\n                \n                this.setState({questions: questions});\n            }\n        );\n    }\n\n    render() {\n        if(this.state.questions === null || this.state.questions === undefined) \n        {\n            return null;\n        } \n        else if(this.state.questions.length === 0) \n        {\n            return (<View><Text>There is no question card in the current deck :(</Text></View>);\n        } \n        else if (this.state.questions.length !== this.state.indexAt) \n        {\n            const question = this.state.questions[this.state.indexAt];\n            return (\n                <View>\n                    <Text>\n                        Your Progress {this.state.indexAt+1} of {this.state.questions.length}\n                    </Text>\n                    <Text>\n                        {this.state.showQuestion ? question.question : question.answer}\n                    </Text>\n                    <Button\n                        title={this.state.showQuestion ? 'Show Answer' : 'Show Question'}\n                        onPress={this.flipQA}\n                    />\n                    <Button\n                        title={'Correct'}\n                        onPress={this.markAsCorrect}\n                    />\n                    <Button\n                        title={'Incorrect'}\n                        onPress={this.pushIncorrect}\n                    />\n                </View>\n            )\n        } \n        else {\n                clearLocalNotification();\n                setLocalNotification();\n                \n            return (\n              \n                <View>\n                    <Text>\n                        You have successfully completed the deck questions!\n                    </Text>\n                    <Text>\n                        Score: You have answered {Math.round(((this.state.correct)/this.state.questions.length)*100)}% Correct!\n                    </Text>\n                    <Button\n                        title={'Restart Quiz'}\n                        onPress={() => {\n                            \n                            this.setState({\n                                correct: 0,\n                                indexAt: 0,\n                                showQuestion: true,\n                            });\n                        }}\n                    />\n                    <Button\n                        title={'Back to Deck'}\n                        onPress={() => {\n                            this.props.navigation.navigate('DeckDetail', {\n                                deck: this.props.route.params.deck,\n                            });\n                        }}\n                    />\n                </View>\n            );\n        }\n    }\n\n    flipQA = () => {\n        this.setState(prevState => ({\n            showQuestion: !prevState.showQuestion,\n            correct: prevState.correct,\n            indexAt: prevState.indexAt,\n            questions: prevState.questions,\n        }));\n    }\n\n\n    markAsCorrect = () => {\n        this.setState(prevState => ({\n            correct: prevState.correct+1,\n            indexAt: prevState.indexAt+1,\n            questions: prevState.questions,\n            showQuestion: true,\n        }));\n    }\n\n    pushIncorrect = () => {\n        this.setState(prevState => ({\n            indexAt: prevState.indexAt+1,\n            showQuestion: true,\n            correct: prevState.correct,\n            questions: prevState.questions,\n        }));\n    }\n}"]},"metadata":{},"sourceType":"module"}