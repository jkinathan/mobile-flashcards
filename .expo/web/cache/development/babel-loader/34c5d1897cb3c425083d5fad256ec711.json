{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as Notifications from 'expo-notifications';\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nvar NOTIFICATION_KEY = 'NOTIFICATION_KEY';\nexport var clearLocalNotification = function clearLocalNotification() {\n  return _regeneratorRuntime.async(function clearLocalNotification$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", AsyncStorage.removeItem(NOTIFICATION_KEY).then(Notifications.cancelAllScheduledNotificationsAsync));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport function setLocalNotification() {\n  AsyncStorage.getItem(NOTIFICATION_KEY).then(JSON.parse).then(function (data) {\n    if (data === null) {\n      Notifications.requestPermissionsAsync().then(function (_ref) {\n        var status = _ref.status;\n\n        if (status === 'granted') {\n          Notifications.cancelAllScheduledNotificationsAsync();\n          Notifications.scheduleNotificationAsync({\n            content: {\n              title: 'Practice for today!',\n              body: \"ðŸ‘‹ don't forget to revise your flashcards for today!\"\n            },\n            trigger: {\n              hour: 14,\n              minute: 30,\n              repeats: true\n            }\n          });\n          AsyncStorage.setItem(NOTIFICATION_KEY, JSON.stringify(true));\n        }\n      });\n\n      if (Platform.OS === 'android') {\n        Notifications.setNotificationChannelAsync('default', {\n          name: 'default',\n          importance: Notifications.AndroidImportance.MAX,\n          vibrationPattern: [0, 250, 250, 250],\n          lightColor: '#FF231F7C'\n        });\n      }\n    }\n  });\n}","map":{"version":3,"sources":["/home/kinathan/Desktop/retribution/mobile-flashcards/utilities/helpers.js"],"names":["Notifications","AsyncStorage","NOTIFICATION_KEY","clearLocalNotification","removeItem","then","cancelAllScheduledNotificationsAsync","setLocalNotification","getItem","JSON","parse","data","requestPermissionsAsync","status","scheduleNotificationAsync","content","title","body","trigger","hour","minute","repeats","setItem","stringify","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor"],"mappings":";AAAA,OAAO,KAAKA,aAAZ,MAA+B,oBAA/B;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AAEA,IAAMC,gBAAgB,GAAG,kBAAzB;AAEA,OAAO,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB;AAAA;AAAA;AAAA;AAAA;AAAA,2CAC7BF,YAAY,CAACG,UAAb,CAAwBF,gBAAxB,EACJG,IADI,CACCL,aAAa,CAACM,oCADf,CAD6B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA/B;AAKL,OAAO,SAASC,oBAAT,GAAiC;AACtCN,EAAAA,YAAY,CAACO,OAAb,CAAqBN,gBAArB,EACGG,IADH,CACQI,IAAI,CAACC,KADb,EAEGL,IAFH,CAEQ,UAACM,IAAD,EAAU;AACd,QAAIA,IAAI,KAAK,IAAb,EAAmB;AAGjBX,MAAAA,aAAa,CAACY,uBAAd,GACGP,IADH,CACQ,gBAAgB;AAAA,YAAbQ,MAAa,QAAbA,MAAa;;AACpB,YAAIA,MAAM,KAAK,SAAf,EAA0B;AACxBb,UAAAA,aAAa,CAACM,oCAAd;AAEAN,UAAAA,aAAa,CAACc,yBAAd,CAAwC;AACtCC,YAAAA,OAAO,EAAE;AACPC,cAAAA,KAAK,EAAE,qBADA;AAEPC,cAAAA,IAAI,EAAE;AAFC,aAD6B;AAKtCC,YAAAA,OAAO,EAAE;AACPC,cAAAA,IAAI,EAAE,EADC;AAEPC,cAAAA,MAAM,EAAE,EAFD;AAGPC,cAAAA,OAAO,EAAE;AAHF;AAL6B,WAAxC;AAYApB,UAAAA,YAAY,CAACqB,OAAb,CAAqBpB,gBAArB,EAAuCO,IAAI,CAACc,SAAL,CAAe,IAAf,CAAvC;AACD;AACF,OAnBH;;AAqBE,UAAIC,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;AAC7BzB,QAAAA,aAAa,CAAC0B,2BAAd,CAA0C,SAA1C,EAAqD;AACnDC,UAAAA,IAAI,EAAE,SAD6C;AAEnDC,UAAAA,UAAU,EAAE5B,aAAa,CAAC6B,iBAAd,CAAgCC,GAFO;AAGnDC,UAAAA,gBAAgB,EAAE,CAAC,CAAD,EAAI,GAAJ,EAAS,GAAT,EAAc,GAAd,CAHiC;AAInDC,UAAAA,UAAU,EAAE;AAJuC,SAArD;AAMD;AAEJ;AACF,GArCH;AAsCD","sourcesContent":["import * as Notifications from 'expo-notifications'\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nconst NOTIFICATION_KEY = 'NOTIFICATION_KEY';\n\nexport const clearLocalNotification = async ()=> {\n  return AsyncStorage.removeItem(NOTIFICATION_KEY)\n    .then(Notifications.cancelAllScheduledNotificationsAsync);\n}\n\n  export function setLocalNotification () {\n    AsyncStorage.getItem(NOTIFICATION_KEY)\n      .then(JSON.parse)\n      .then((data) => {\n        if (data === null) {\n\n          // Permissions.askAsync(Permissions.NOTIFICATIONS)\n          Notifications.requestPermissionsAsync()\n            .then(({ status }) => {\n              if (status === 'granted') {\n                Notifications.cancelAllScheduledNotificationsAsync()\n  \n                Notifications.scheduleNotificationAsync({\n                  content: {\n                    title: 'Practice for today!',\n                    body: \"ðŸ‘‹ don't forget to revise your flashcards for today!\",\n                  },\n                  trigger: {\n                    hour: 14,\n                    minute: 30,\n                    repeats: true,\n                  },\n                })\n\n                AsyncStorage.setItem(NOTIFICATION_KEY, JSON.stringify(true))\n              }\n            })\n\n            if (Platform.OS === 'android') {\n              Notifications.setNotificationChannelAsync('default', {\n                name: 'default',\n                importance: Notifications.AndroidImportance.MAX,\n                vibrationPattern: [0, 250, 250, 250],\n                lightColor: '#FF231F7C',\n              });\n            }\n\n        }\n      })\n  }"]},"metadata":{},"sourceType":"module"}