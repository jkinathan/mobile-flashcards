{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport { getDeck } from \"../utilities/api\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Styles from \"../utilities/styles\";\nimport { setLocalNotification, clearLocalNotification } from \"../utilities/helpers\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\n\nvar StartQuiz = function (_React$Component) {\n  _inherits(StartQuiz, _React$Component);\n\n  var _super = _createSuper(StartQuiz);\n\n  function StartQuiz(props) {\n    var _this;\n\n    _classCallCheck(this, StartQuiz);\n\n    _this = _super.call(this, props);\n\n    _this.flipQA = function () {\n      _this.setState(function (prevState) {\n        return {\n          showQuestion: !prevState.showQuestion,\n          correct: prevState.correct,\n          indexAt: prevState.indexAt,\n          questions: prevState.questions\n        };\n      });\n    };\n\n    _this.markAsCorrect = function () {\n      _this.setState(function (prevState) {\n        return {\n          correct: prevState.correct + 1,\n          indexAt: prevState.indexAt + 1,\n          questions: prevState.questions,\n          showQuestion: true\n        };\n      });\n    };\n\n    _this.pushIncorrect = function () {\n      _this.setState(function (prevState) {\n        return {\n          indexAt: prevState.indexAt + 1,\n          showQuestion: true,\n          correct: prevState.correct,\n          questions: prevState.questions\n        };\n      });\n    };\n\n    _this.Notify = function () {\n      clearLocalNotification();\n      setLocalNotification();\n      console.log(\"Notifications set\");\n    };\n\n    _this.state = {\n      questions: null,\n      correct: 0,\n      indexAt: 0,\n      showQuestion: true\n    };\n    return _this;\n  }\n\n  _createClass(StartQuiz, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var route = this.props.route;\n      var deckID = route.params.deck.title;\n      getDeck(deckID).then(function (deckk) {\n        var questions = deckk.questions;\n\n        _this2.setState({\n          questions: questions\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      if (this.state.questions === null || this.state.questions === undefined) {\n        return null;\n      } else if (this.state.questions.length === 0) {\n        return React.createElement(View, {\n          style: Styles.VerticalAlignCenter\n        }, React.createElement(Text, {\n          style: Styles.deckTexts\n        }, \"There is no question card in the current deck...\"));\n      } else if (this.state.questions.length !== this.state.indexAt) {\n        var question = this.state.questions[this.state.indexAt];\n        return React.createElement(View, {\n          style: Styles.VerticalAlignCenter\n        }, React.createElement(Text, {\n          style: Styles.deckTexts\n        }, \"Your Progress \", this.state.indexAt + 1, \" of \", this.state.questions.length), React.createElement(View, {\n          style: Styles.VerticalAlignCenter\n        }, this.state.showQuestion ? React.createElement(Text, {\n          style: Styles.deckTexts\n        }, question.question) : React.createElement(Text, {\n          style: Styles.deckTexts\n        }, question.answer), React.createElement(TouchableOpacity, {\n          onPress: this.flipQA\n        }, this.state.showQuestion ? React.createElement(Text, {\n          style: Styles.subButton\n        }, \"Show Answer\") : React.createElement(Text, {\n          style: Styles.subButton\n        }, \"Show Question\"))), React.createElement(View, {\n          style: {\n            marginBottom: 50\n          }\n        }, React.createElement(TouchableOpacity, {\n          onPress: this.markAsCorrect\n        }, React.createElement(Text, {\n          style: Styles.button\n        }, \"Correct\")), React.createElement(TouchableOpacity, {\n          onPress: this.pushIncorrect\n        }, React.createElement(Text, {\n          style: [Styles.button, {\n            color: \"red\",\n            borderColor: \"red\"\n          }]\n        }, \"Incorrect\"))));\n      } else {\n        return React.createElement(View, {\n          style: Styles.VerticalAlignCenter\n        }, React.createElement(Text, {\n          style: Styles.deckTexts\n        }, \"You have successfully completed the `` deck questions!\"), React.createElement(Text, {\n          style: Styles.deckTexts\n        }, \"Score: You have answered \", Math.round(this.state.correct / this.state.questions.length * 100), \"% Correct!\"), React.createElement(TouchableOpacity, {\n          onPress: function onPress() {\n            _this3.setState({\n              correct: 0,\n              indexAt: 0,\n              showQuestion: true\n            });\n\n            _this3.Notify;\n          }\n        }, React.createElement(Text, {\n          style: Styles.button\n        }, \"Restart Quiz\")), React.createElement(TouchableOpacity, {\n          onPress: function onPress() {\n            _this3.props.navigation.navigate('DeckDetail', {\n              deck: _this3.props.route.params.deck\n            });\n          }\n        }, React.createElement(Text, {\n          style: [Styles.button, {\n            color: \"gray\",\n            borderColor: \"gray\"\n          }]\n        }, \"Back to Deck\")));\n      }\n    }\n  }]);\n\n  return StartQuiz;\n}(React.Component);\n\nexport { StartQuiz as default };","map":{"version":3,"sources":["/home/kinathan/Desktop/retribution/mobile-flashcards/components/Quiz.js"],"names":["React","getDeck","Styles","setLocalNotification","clearLocalNotification","StartQuiz","props","flipQA","setState","prevState","showQuestion","correct","indexAt","questions","markAsCorrect","pushIncorrect","Notify","console","log","state","route","deckID","params","deck","title","then","deckk","undefined","length","VerticalAlignCenter","deckTexts","question","answer","subButton","marginBottom","button","color","borderColor","Math","round","navigation","navigate","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { getDeck } from \"../utilities/api\";\nimport {Button, Text, View} from \"react-native\";\nimport Styles from \"../utilities/styles\";\nimport { setLocalNotification,clearLocalNotification } from \"../utilities/helpers\";\nimport { TouchableOpacity } from \"react-native\";\nexport default class StartQuiz extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            questions: null,\n            correct: 0,\n            indexAt: 0,\n            showQuestion: true,\n        }\n    }\n\n    componentDidMount() {\n        const { route} = this.props;\n\n        const deckID = route.params.deck.title;\n        \n        getDeck(deckID).then((deckk) => {\n\n                const questions = deckk.questions;\n                \n                this.setState({questions: questions});\n            }\n        );\n    }\n\n    render() {\n        if(this.state.questions === null || this.state.questions === undefined) \n        {\n            return null;\n        } \n        else if(this.state.questions.length === 0) \n        {\n            return (\n            <View style={Styles.VerticalAlignCenter}>\n              <Text style={Styles.deckTexts}>There is no question card in the current deck...</Text>\n            </View>);\n        } \n        else if (this.state.questions.length !== this.state.indexAt) \n        {\n            const question = this.state.questions[this.state.indexAt];\n            return (\n                <View style={Styles.VerticalAlignCenter}>\n                    <Text style={Styles.deckTexts}>\n                        Your Progress {this.state.indexAt+1} of {this.state.questions.length}\n                    </Text>\n\n                    <View style={Styles.VerticalAlignCenter}>\n                      {this.state.showQuestion ? (\n                        <Text style={Styles.deckTexts}>{question.question}</Text>\n                      ) : (\n                        <Text style={Styles.deckTexts}>{question.answer}</Text>\n                      )}\n                      <TouchableOpacity\n                        onPress={this.flipQA}\n                      >\n                        {this.state.showQuestion ? (\n                          <Text style={Styles.subButton}>Show Answer</Text>\n                        ) : (\n                          <Text style={Styles.subButton}>Show Question</Text>\n                        )}\n                      </TouchableOpacity>\n                    </View>\n\n                    <View style={{ marginBottom: 50 }}>\n\n                      <TouchableOpacity onPress={this.markAsCorrect}>\n                        <Text style={Styles.button}>Correct</Text>\n                      </TouchableOpacity>\n\n                      <TouchableOpacity onPress={this.pushIncorrect}>\n                        <Text\n                          style={[Styles.button, { color: \"red\", borderColor: \"red\" }]}\n                        >\n                          Incorrect\n                        </Text>\n                      </TouchableOpacity>\n                    </View>\n\n                </View>\n            )\n        } \n        else {\n            return (\n              \n              <View style={Styles.VerticalAlignCenter}>\n                    <Text style={Styles.deckTexts}>\n                      \n                        You have successfully completed the `` deck questions!\n                    </Text>\n                    <Text style={Styles.deckTexts}>\n                        Score: You have answered {Math.round(((this.state.correct)/this.state.questions.length)*100)}% Correct!\n                    </Text>\n\n\n                    <TouchableOpacity onPress={() => {\n                            \n                            this.setState({\n                                correct: 0,\n                                indexAt: 0,\n                                showQuestion: true,\n                            });\n                            this.Notify;\n                        }}>\n                      <Text style={Styles.button}>Restart Quiz</Text>\n\n                    </TouchableOpacity>\n                    <TouchableOpacity onPress={() => {\n                            this.props.navigation.navigate('DeckDetail', {\n                                deck: this.props.route.params.deck,\n                            });\n                            }}>\n                      <Text\n                        style={[Styles.button, { color: \"gray\", borderColor: \"gray\" }]}\n                      >\n                        Back to Deck\n                      </Text>\n                    </TouchableOpacity>\n                </View>\n            );\n        }\n    }\n\n    flipQA = () => {\n        this.setState(prevState => ({\n            showQuestion: !prevState.showQuestion,\n            correct: prevState.correct,\n            indexAt: prevState.indexAt,\n            questions: prevState.questions,\n        }));\n    }\n\n\n    markAsCorrect = () => {\n        this.setState(prevState => ({\n            correct: prevState.correct+1,\n            indexAt: prevState.indexAt+1,\n            questions: prevState.questions,\n            showQuestion: true,\n        }));\n    }\n\n    pushIncorrect = () => {\n        this.setState(prevState => ({\n            indexAt: prevState.indexAt+1,\n            showQuestion: true,\n            correct: prevState.correct,\n            questions: prevState.questions,\n        }));\n    }\n\n  Notify = () => {\n    clearLocalNotification();\n    setLocalNotification();\n    console.log(\"Notifications set\")\n  }\n}"]},"metadata":{},"sourceType":"module"}