{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as Notifications from 'expo-notifications';\nimport * as Permissions from 'expo-permissions';\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nvar NOTIFICATION_KEY = 'NOTIFICATION_KEY';\nvar CHANNEL_ID = 'DailyReminder';\nexport var clearLocalNotification = function clearLocalNotification() {\n  return _regeneratorRuntime.async(function clearLocalNotification$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", AsyncStorage.removeItem(NOTIFICATION_KEY).then(Notifications.cancelAllScheduledNotificationsAsync));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nfunction createNotification() {\n  return {\n    title: 'Mobile Flashcards Reminder',\n    body: \"ðŸ‘‹ Don't forget to study for today!\",\n    ios: {\n      sound: true\n    },\n    android: {\n      channelId: CHANNEL_ID,\n      sticky: false,\n      color: 'red'\n    }\n  };\n}\n\nexport function setLocalNotification() {\n  AsyncStorage.getItem(NOTIFICATION_KEY).then(JSON.parse).then(function (data) {\n    if (data === null) {\n      Permissions.askAsync(Permissions.NOTIFICATIONS).then(function (_ref) {\n        var status = _ref.status;\n\n        if (status === 'granted') {\n          Notifications.createChannelAndroidAsync(CHANNEL_ID, createChannel()).then(function (val) {\n            return console.log('channel return:', val);\n          }).then(function () {\n            Notifications.cancelAllScheduledNotificationsAsync();\n            var tomorrow = new Date();\n            tomorrow.setDate(tomorrow.getDate() + 1);\n            tomorrow.setHours(20);\n            tomorrow.setMinutes(0);\n            Notifications.scheduleLocalNotificationAsync(createNotification(), {\n              time: tomorrow,\n              repeat: 'day'\n            });\n            AsyncStorage.setItem(NOTIFICATION_KEY, JSON.stringify(true));\n          }).catch(function (err) {\n            console.log('err', err);\n          });\n        }\n      });\n    }\n  });\n}","map":{"version":3,"sources":["/home/kinathan/Desktop/retribution/mobile-flashcards/utilities/helpers.js"],"names":["Notifications","Permissions","AsyncStorage","NOTIFICATION_KEY","CHANNEL_ID","clearLocalNotification","removeItem","then","cancelAllScheduledNotificationsAsync","createNotification","title","body","ios","sound","android","channelId","sticky","color","setLocalNotification","getItem","JSON","parse","data","askAsync","NOTIFICATIONS","status","createChannelAndroidAsync","createChannel","val","console","log","tomorrow","Date","setDate","getDate","setHours","setMinutes","scheduleLocalNotificationAsync","time","repeat","setItem","stringify","catch","err"],"mappings":";AAAA,OAAO,KAAKA,aAAZ,MAA+B,oBAA/B;AACA,OAAO,KAAKC,WAAZ,MAA6B,kBAA7B;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AAEA,IAAMC,gBAAgB,GAAG,kBAAzB;AACA,IAAMC,UAAU,GAAG,eAAnB;AAEA,OAAO,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB;AAAA;AAAA;AAAA;AAAA;AAAA,2CAC7BH,YAAY,CAACI,UAAb,CAAwBH,gBAAxB,EACJI,IADI,CACCP,aAAa,CAACQ,oCADf,CAD6B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA/B;;AAWP,SAASC,kBAAT,GAA8B;AAC5B,SAAO;AACLC,IAAAA,KAAK,EAAE,4BADF;AAELC,IAAAA,IAAI,EAAE,qCAFD;AAGLC,IAAAA,GAAG,EAAE;AACHC,MAAAA,KAAK,EAAE;AADJ,KAHA;AAMLC,IAAAA,OAAO,EAAE;AACPC,MAAAA,SAAS,EAAEX,UADJ;AAEPY,MAAAA,MAAM,EAAE,KAFD;AAGPC,MAAAA,KAAK,EAAE;AAHA;AANJ,GAAP;AAYD;;AAID,OAAO,SAASC,oBAAT,GAAgC;AACrChB,EAAAA,YAAY,CAACiB,OAAb,CAAqBhB,gBAArB,EACGI,IADH,CACQa,IAAI,CAACC,KADb,EAEGd,IAFH,CAEQ,UAAAe,IAAI,EAAI;AAEZ,QAAIA,IAAI,KAAK,IAAb,EAAmB;AACjBrB,MAAAA,WAAW,CAACsB,QAAZ,CAAqBtB,WAAW,CAACuB,aAAjC,EAAgDjB,IAAhD,CAAqD,gBAAgB;AAAA,YAAbkB,MAAa,QAAbA,MAAa;;AAGnE,YAAIA,MAAM,KAAK,SAAf,EAA0B;AAExBzB,UAAAA,aAAa,CAAC0B,yBAAd,CAAwCtB,UAAxC,EAAoDuB,aAAa,EAAjE,EACGpB,IADH,CACQ,UAAAqB,GAAG;AAAA,mBAAIC,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BF,GAA/B,CAAJ;AAAA,WADX,EAEGrB,IAFH,CAEQ,YAAM;AACVP,YAAAA,aAAa,CAACQ,oCAAd;AAEA,gBAAMuB,QAAQ,GAAG,IAAIC,IAAJ,EAAjB;AAIAD,YAAAA,QAAQ,CAACE,OAAT,CAAiBF,QAAQ,CAACG,OAAT,KAAqB,CAAtC;AACAH,YAAAA,QAAQ,CAACI,QAAT,CAAkB,EAAlB;AACAJ,YAAAA,QAAQ,CAACK,UAAT,CAAoB,CAApB;AAEApC,YAAAA,aAAa,CAACqC,8BAAd,CACE5B,kBAAkB,EADpB,EAEE;AACE6B,cAAAA,IAAI,EAAEP,QADR;AAEEQ,cAAAA,MAAM,EAAE;AAFV,aAFF;AAQArC,YAAAA,YAAY,CAACsC,OAAb,CAAqBrC,gBAArB,EAAuCiB,IAAI,CAACqB,SAAL,CAAe,IAAf,CAAvC;AACD,WAtBH,EAuBGC,KAvBH,CAuBS,UAAAC,GAAG,EAAI;AACZd,YAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBa,GAAnB;AACD,WAzBH;AA0BD;AACF,OAhCD;AAiCD;AACF,GAvCH;AAwCD","sourcesContent":["import * as Notifications from 'expo-notifications'\nimport * as Permissions from 'expo-permissions';\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nconst NOTIFICATION_KEY = 'NOTIFICATION_KEY';\nconst CHANNEL_ID = 'DailyReminder';\n\nexport const clearLocalNotification = async ()=> {\n  return AsyncStorage.removeItem(NOTIFICATION_KEY)\n    .then(Notifications.cancelAllScheduledNotificationsAsync);\n}\n\n// export function clearLocalNotification() {\n//   return AsyncStorage.removeItem(NOTIFICATION_KEY).then(\n//     Notifications.cancelAllScheduledNotificationsAsync\n//   );\n// }\n\nfunction createNotification() {\n  return {\n    title: 'Mobile Flashcards Reminder',\n    body: \"ðŸ‘‹ Don't forget to study for today!\",\n    ios: {\n      sound: true\n    },\n    android: {\n      channelId: CHANNEL_ID,\n      sticky: false,\n      color: 'red'\n    }\n  };\n}\n\n\n\nexport function setLocalNotification() {\n  AsyncStorage.getItem(NOTIFICATION_KEY)\n    .then(JSON.parse)\n    .then(data => {\n      // if (true) {\n      if (data === null) {\n        Permissions.askAsync(Permissions.NOTIFICATIONS).then(({ status }) => {\n          // console.log('got in');\n          // console.log('data', data);\n          if (status === 'granted') {\n            // Notifications.presentLocalNotificationAsync(createNotification());\n            Notifications.createChannelAndroidAsync(CHANNEL_ID, createChannel())\n              .then(val => console.log('channel return:', val))\n              .then(() => {\n                Notifications.cancelAllScheduledNotificationsAsync();\n\n                const tomorrow = new Date();\n                // 2 minute from now\n                // tomorrow.setTime(tomorrow.getTime() + 2 * 60000);\n\n                tomorrow.setDate(tomorrow.getDate() + 1);\n                tomorrow.setHours(20);\n                tomorrow.setMinutes(0);\n\n                Notifications.scheduleLocalNotificationAsync(\n                  createNotification(),\n                  {\n                    time: tomorrow,\n                    repeat: 'day'\n                  }\n                );\n\n                AsyncStorage.setItem(NOTIFICATION_KEY, JSON.stringify(true));\n              })\n              .catch(err => {\n                console.log('err', err);\n              });\n          }\n        });\n      }\n    });\n}\n\n\n\n  // export function setLocalNotification () {\n  //   AsyncStorage.getItem(NOTIFICATION_KEY)\n  //     .then(JSON.parse)\n  //     .then((data) => {\n  //       if (data === null) {\n  //         Permissions.askAsync(Permissions.NOTIFICATIONS)\n  //           .then(({ status }) => {\n  //             if (status === 'granted') {\n  //               Notifications.cancelAllScheduledNotificationsAsync()\n  //               let tomorrow = new Date()\n  //               tomorrow.setDate(tomorrow.getDate() + 1)\n  //               tomorrow.setHours(14)\n  //               tomorrow.setMinutes(0)\n  \n  //               Notifications.scheduleNotificationAsync(\n  //                 createNotification(),\n  //                 {\n  //                   time: tomorrow,\n  //                   repeat: 'day',\n  //                 }\n  //               )\n  \n  //               AsyncStorage.setItem(NOTIFICATION_KEY, JSON.stringify(true))\n  //             }\n  //           })\n  //       }\n  //     })\n  // }"]},"metadata":{},"sourceType":"module"}