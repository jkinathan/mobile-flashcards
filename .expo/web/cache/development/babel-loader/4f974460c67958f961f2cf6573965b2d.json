{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Styles from \"../utilities/styles\";\nimport { useState } from \"react\";\nimport { addCardToDeck } from \"../actions/action\";\nimport { useDispatch } from \"react-redux\";\nimport { addCardToDeckAS } from \"../utilities/api\";\n\nvar AddCard = function AddCard(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n  var dispatch = useDispatch();\n  var deck = route.params.deck;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      question = _useState2[0],\n      setQuestion = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      answer = _useState4[0],\n      setAnswer = _useState4[1];\n\n  var handleSubmit = function handleSubmit() {\n    dispatch(addCardToDeck(deck.title, {\n      answer: answer,\n      question: question\n    }));\n    addCardToDeckAS(deck.title, {\n      answer: answer,\n      question: question\n    });\n    navigation.navigate(\"Deck\", {\n      deck: deckdeck.title\n    });\n  };\n\n  return React.createElement(View, {\n    style: Styles.main\n  }, React.createElement(Text, {\n    style: Styles.deckTexts\n  }, \"Title: \", deck.deck.title), React.createElement(View, {\n    style: Styles.VerticalAlignCenter\n  }, React.createElement(View, {\n    style: {\n      marginBottom: 30\n    }\n  }, React.createElement(TextInput, {\n    style: Styles.textInput,\n    value: question,\n    placeholder: \"Question\",\n    onChangeText: function onChangeText(text) {\n      return setQuestion(text);\n    }\n  })), React.createElement(View, {\n    style: {\n      marginBottom: 30\n    }\n  }, React.createElement(TextInput, {\n    style: Styles.textInput,\n    value: answer,\n    placeholder: \"Answer\",\n    onChangeText: function onChangeText(text) {\n      return setAnswer(text);\n    }\n  }))), React.createElement(TouchableOpacity, {\n    style: {\n      marginBottom: 30\n    },\n    onPress: handleSubmit\n  }, React.createElement(Text, {\n    style: Styles.button\n  }, \"Create Card\")));\n};\n\nexport default AddCard;","map":{"version":3,"sources":["/home/kinathan/Desktop/retribution/mobile-flashcards/components/AddCard.js"],"names":["React","Styles","useState","addCardToDeck","useDispatch","addCardToDeckAS","AddCard","route","navigation","dispatch","deck","params","question","setQuestion","answer","setAnswer","handleSubmit","title","navigate","deckdeck","main","deckTexts","VerticalAlignCenter","marginBottom","textInput","text","button"],"mappings":";AAUA,OAAOA,KAAP,MAAkB,OAAlB;;;;;AAEA,OAAOC,MAAP;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,aAAT;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,eAAT;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAA2B;AAAA,MAAxBC,KAAwB,QAAxBA,KAAwB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;AAEzC,MAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACA,MAAQM,IAAR,GAAiBH,KAAK,CAACI,MAAvB,CAAQD,IAAR;;AACA,kBAAgCR,QAAQ,CAAC,EAAD,CAAxC;AAAA;AAAA,MAAOU,QAAP;AAAA,MAAiBC,WAAjB;;AACA,mBAA4BX,QAAQ,CAAC,EAAD,CAApC;AAAA;AAAA,MAAOY,MAAP;AAAA,MAAeC,SAAf;;AAGA,MAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAEzBP,IAAAA,QAAQ,CAACN,aAAa,CAACO,IAAI,CAACO,KAAN,EAAa;AAAEH,MAAAA,MAAM,EAAEA,MAAV;AAAkBF,MAAAA,QAAQ,EAAEA;AAA5B,KAAb,CAAd,CAAR;AAEAP,IAAAA,eAAe,CAACK,IAAI,CAACO,KAAN,EAAa;AAAEH,MAAAA,MAAM,EAAEA,MAAV;AAAkBF,MAAAA,QAAQ,EAAEA;AAA5B,KAAb,CAAf;AAEAJ,IAAAA,UAAU,CAACU,QAAX,CAAoB,MAApB,EAA4B;AAAER,MAAAA,IAAI,EAAES,QAAQ,CAACF;AAAjB,KAA5B;AACD,GAPD;;AASA,SAEE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEhB,MAAM,CAACmB;AAApB,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEnB,MAAM,CAACoB;AAApB,gBAAuCX,IAAI,CAACA,IAAL,CAAUO,KAAjD,CADF,EAEE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEhB,MAAM,CAACqB;AAApB,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,YAAY,EAAE;AAAhB;AAAb,KACE,oBAAC,SAAD;AACE,IAAA,KAAK,EAAEtB,MAAM,CAACuB,SADhB;AAEE,IAAA,KAAK,EAAEZ,QAFT;AAGE,IAAA,WAAW,EAAC,UAHd;AAIE,IAAA,YAAY,EAAE,sBAACa,IAAD;AAAA,aAAUZ,WAAW,CAACY,IAAD,CAArB;AAAA;AAJhB,IADF,CADF,EAUE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEF,MAAAA,YAAY,EAAE;AAAhB;AAAb,KACE,oBAAC,SAAD;AACE,IAAA,KAAK,EAAEtB,MAAM,CAACuB,SADhB;AAEE,IAAA,KAAK,EAAEV,MAFT;AAGE,IAAA,WAAW,EAAC,QAHd;AAIE,IAAA,YAAY,EAAE,sBAACW,IAAD;AAAA,aAAUV,SAAS,CAACU,IAAD,CAAnB;AAAA;AAJhB,IADF,CAVF,CAFF,EAqBE,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAE;AAAEF,MAAAA,YAAY,EAAE;AAAhB,KAAzB;AAA+C,IAAA,OAAO,EAAEP;AAAxD,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEf,MAAM,CAACyB;AAApB,mBADF,CArBF,CAFF;AA4BD,CA7CD;;AA+CA,eAAepB,OAAf","sourcesContent":["// import React, { Component } from 'react';\n// import { Text, View, TextInput, StyleSheet } from 'react-native';\n// import TouchButton from './TouchButton';\n// import { gray, green } from '../utilities/colors';\n// import { connect } from 'react-redux';\n// import { addCardToDeck } from '../actions/action';\n// import { addCardToDeckAS } from '../utilities/api';\n\n\n\nimport React from \"react\";\nimport { View, Text, TextInput, TouchableOpacity } from \"react-native\";\nimport Styles from \"../utilities/styles\";\nimport { useState } from \"react\";\nimport { addCardToDeck } from \"../actions/action\";\nimport { useDispatch } from \"react-redux\";\nimport { addCardToDeckAS } from \"../utilities/api\";\n\nconst AddCard = ({ route, navigation }) => {\n  \n  const dispatch = useDispatch();\n  const { deck } = route.params;\n  const [question, setQuestion] = useState(\"\");\n  const [answer, setAnswer] = useState(\"\");\n\n  // console.log(\"Decker mine\",route.params)\n  const handleSubmit = () => {\n\n    dispatch(addCardToDeck(deck.title, { answer: answer, question: question }));\n\n    addCardToDeckAS(deck.title, { answer: answer, question: question });\n    \n    navigation.navigate(\"Deck\", { deck: deckdeck.title });\n  };\n\n  return (\n\n    <View style={Styles.main}>\n      <Text style={Styles.deckTexts}>Title: {deck.deck.title}</Text>\n      <View style={Styles.VerticalAlignCenter}>\n        <View style={{ marginBottom: 30 }}>\n          <TextInput\n            style={Styles.textInput}\n            value={question}\n            placeholder=\"Question\"\n            onChangeText={(text) => setQuestion(text)}\n          />\n        </View>\n\n        <View style={{ marginBottom: 30 }}>\n          <TextInput\n            style={Styles.textInput}\n            value={answer}\n            placeholder=\"Answer\"\n            onChangeText={(text) => setAnswer(text)}\n          />\n        </View>\n      </View>\n      <TouchableOpacity style={{ marginBottom: 30 }} onPress={handleSubmit}>\n        <Text style={Styles.button}>Create Card</Text>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nexport default AddCard;\n\n// export class AddCard extends Component {\n  \n//   state = {\n//     question: '',\n//     answer: ''\n//   };\n\n//   handleQuestionChange = question => {\n//     this.setState({ question });\n//   };\n\n//   handleAnswerChange = answer => {\n//     this.setState({ answer });\n//   };\n\n//   handleSubmit = () => {\n\n//     const { addCardToDeck, title, navigation } = this.props;\n//     const card = {\n//       question: this.state.question,\n//       answer: this.state.answer\n//     };\n\n//     addCardToDeck(title, card);\n//     addCardToDeckAS(title, card);\n\n//     this.setState({ question: '', answer: '' });\n//     navigation.goBack();\n//   };\n//   render() {\n//     return (\n//       <View style={styles.container}>\n//         <View>\n//           <View style={styles.block}>\n//             <Text style={styles.title}>Add a question</Text>\n//           </View>\n//           <View style={[styles.block]}>\n//             <TextInput\n//               style={styles.input}\n//               value={this.state.question}\n//               onChangeText={this.handleQuestionChange}\n//               placeholder=\"Question\"\n//               autoFocus={true}\n//               returnKeyType=\"next\"\n//               onSubmitEditing={() => this.answerTextInput.focus()}\n//               blurOnSubmit={false}\n//             />\n//           </View>\n//           <View style={[styles.block]}>\n//             <TextInput\n//               style={styles.input}\n//               value={this.state.answer}\n//               onChangeText={this.handleAnswerChange}\n//               placeholder=\"Answer\"\n//               ref={input => {\n//                 this.answerTextInput = input;\n//               }}\n//               returnKeyType=\"done\"\n//               onSubmitEditing={this.handleSubmit}\n//             />\n//           </View>\n//           <TouchButton\n//             btnStyle={{ backgroundColor: green, borderColor: '#fff' }}\n//             onPress={this.handleSubmit}\n//             disabled={this.state.question === '' || this.state.answer === ''}\n//           >\n//             Submit\n//           </TouchButton>\n//         </View>\n//         <View style={{ height: '30%' }} />\n//       </View>\n//     );\n//   }\n// }\n\n// const styles = StyleSheet.create({\n//   container: {\n//     flex: 1,\n//     paddingTop: 16,\n//     paddingLeft: 16,\n//     paddingRight: 16,\n//     paddingBottom: 16,\n//     backgroundColor: gray,\n//     justifyContent: 'space-around'\n//   },\n//   block: {\n//     marginBottom: 20\n//   },\n//   title: {\n//     textAlign: 'center',\n//     fontSize: 32\n//   },\n//   input: {\n//     borderWidth: 1,\n//     borderColor: 'gray',\n//     backgroundColor: '#fff',\n//     paddingLeft: 10,\n//     paddingRight: 10,\n//     borderRadius: 5,\n//     fontSize: 20,\n//     height: 40\n//   }\n// });\n\n// const mapStateToProps = (state, { navigation }) => {\n//   const title = navigation.getParam('title', 'undefined');\n\n//   return {\n//     title\n//   };\n// };\n\n// export default connect(mapStateToProps,{ addCardToDeck })(AddCard);"]},"metadata":{},"sourceType":"module"}