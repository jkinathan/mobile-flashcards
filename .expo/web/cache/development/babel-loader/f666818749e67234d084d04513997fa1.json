{"ast":null,"code":"import React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { useSelector } from \"react-redux\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { removeDeckAS } from \"../utilities/api\";\nimport { removeDeck } from \"../actions/action\";\nimport { useDispatch } from \"react-redux\";\nimport { useEffect } from \"react\";\n\nvar DeckDetail = function DeckDetail(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n  var dispatch = useDispatch();\n  console.log(rouye);\n  var title = route.params.title;\n  var state = useSelector(function (state) {\n    return state;\n  });\n  var cards = 0;\n\n  if (state[deck] !== undefined) {\n    cards = state[deck].questions.length;\n  }\n\n  var removeDeck = function removeDeck() {\n    removeDeckAS(deck);\n    navigation.navigate(\"Home\");\n  };\n\n  useEffect(function () {\n    navigation.setOptions({\n      title: deck\n    });\n  }, []);\n  return React.createElement(View, null, React.createElement(Text, null, deck), React.createElement(Text, null, cards === 1 ? cards + \" Card\" : cards === 0 ? \"No card\" : cards + \" cards\"), React.createElement(View, null, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return navigation.navigate(\"Add Card\", {\n        deck: state[deck]\n      });\n    }\n  }, React.createElement(Text, null, \"Add Card\")), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return navigation.navigate(\"Quiz\", {\n        deck: state[deck]\n      });\n    }\n  }, React.createElement(Text, {\n    style: Styles.button\n  }, \"Start Quiz\")), React.createElement(TouchableOpacity, {\n    onPress: removeDeck\n  }, React.createElement(Text, {\n    style: Styles.delete\n  }, \"Delete Deck\"))));\n};\n\nexport default DeckDetail;","map":{"version":3,"sources":["/home/kinathan/Desktop/retribution/mobile-flashcards/components/DeckDetail.js"],"names":["React","useSelector","removeDeckAS","removeDeck","useDispatch","useEffect","DeckDetail","route","navigation","dispatch","console","log","rouye","title","params","state","cards","deck","undefined","questions","length","navigate","setOptions","Styles","button","delete"],"mappings":"AAUA,OAAOA,KAAP,MAAkB,OAAlB;;;AAGA,SAASC,WAAT,QAA4B,aAA5B;;AAEA,SAASC,YAAT;AACA,SAASC,UAAT;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,SAAT,QAA0B,OAA1B;;AAGA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAA2B;AAAA,MAAxBC,KAAwB,QAAxBA,KAAwB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;AAC5C,MAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACA,MAAQC,KAAR,GAAkBN,KAAK,CAACO,MAAxB,CAAQD,KAAR;AACA,MAAME,KAAK,GAAGd,WAAW,CAAC,UAACc,KAAD;AAAA,WAAWA,KAAX;AAAA,GAAD,CAAzB;AAEA,MAAIC,KAAK,GAAG,CAAZ;;AAEA,MAAID,KAAK,CAACE,IAAD,CAAL,KAAgBC,SAApB,EAA+B;AAC7BF,IAAAA,KAAK,GAAGD,KAAK,CAACE,IAAD,CAAL,CAAYE,SAAZ,CAAsBC,MAA9B;AACD;;AAED,MAAMjB,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvBD,IAAAA,YAAY,CAACe,IAAD,CAAZ;AACAT,IAAAA,UAAU,CAACa,QAAX,CAAoB,MAApB;AACD,GAHD;;AAKAhB,EAAAA,SAAS,CAAC,YAAM;AACdG,IAAAA,UAAU,CAACc,UAAX,CAAsB;AAAET,MAAAA,KAAK,EAAEI;AAAT,KAAtB;AACD,GAFQ,EAEN,EAFM,CAAT;AAGA,SACE,oBAAC,IAAD,QACE,oBAAC,IAAD,QAAOA,IAAP,CADF,EAEE,oBAAC,IAAD,QACGD,KAAK,KAAK,CAAV,GACGA,KAAK,GAAG,OADX,GAEGA,KAAK,KAAK,CAAV,GACA,SADA,GAEAA,KAAK,GAAG,QALd,CAFF,EAUE,oBAAC,IAAD,QACE,oBAAC,gBAAD;AACE,IAAA,OAAO,EAAE;AAAA,aAAMR,UAAU,CAACa,QAAX,CAAoB,UAApB,EAAgC;AAAEJ,QAAAA,IAAI,EAAEF,KAAK,CAACE,IAAD;AAAb,OAAhC,CAAN;AAAA;AADX,KAGE,oBAAC,IAAD,mBAHF,CADF,EAME,oBAAC,gBAAD;AACE,IAAA,OAAO,EAAE;AAAA,aAAMT,UAAU,CAACa,QAAX,CAAoB,MAApB,EAA4B;AAAEJ,QAAAA,IAAI,EAAEF,KAAK,CAACE,IAAD;AAAb,OAA5B,CAAN;AAAA;AADX,KAGE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEM,MAAM,CAACC;AAApB,kBAHF,CANF,EAWE,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAErB;AAA3B,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEoB,MAAM,CAACE;AAApB,mBADF,CAXF,CAVF,CADF;AA4BD,CAhDD;;AAkDA,eAAenB,UAAf","sourcesContent":["// import React, { Component } from 'react';\n// import { View, StyleSheet } from 'react-native';\n// import Deck from './Deck';\n// import TouchButton from './TouchButton';\n// import TextButton from './TextButton';\n// import { gray, textGray, green, white, red } from '../utilities/colors';\n// import { connect } from 'react-redux';\n// import { removeDeck } from '../actions/action';\n// import { removeDeckAS } from '../utilities/api';\n\nimport React from \"react\";\nimport { View, Text } from \"react-native\";\n// import Styles from \"../../utils/styles\";\nimport { useSelector } from \"react-redux\";\nimport { TouchableOpacity } from \"react-native\";\nimport { removeDeckAS } from \"../utilities/api\";\nimport { removeDeck } from \"../actions/action\";\nimport { useDispatch } from \"react-redux\";\nimport { useEffect } from \"react\";\n\n\nconst DeckDetail = ({ route, navigation }) => {\n  const dispatch = useDispatch();\n  console.log(rouye)\n  const { title } = route.params;\n  const state = useSelector((state) => state);\n\n  let cards = 0;\n  \n  if (state[deck] !== undefined) {\n    cards = state[deck].questions.length;\n  }\n  \n  const removeDeck = () => {\n    removeDeckAS(deck);\n    navigation.navigate(\"Home\");\n  };\n  \n  useEffect(() => {\n    navigation.setOptions({ title: deck });\n  }, []);\n  return (\n    <View >\n      <Text>{deck}</Text>\n      <Text >\n        {cards === 1\n          ? cards + \" Card\"\n          : cards === 0\n          ? \"No card\"\n          : cards + \" cards\"}\n      </Text>\n\n      <View >\n        <TouchableOpacity\n          onPress={() => navigation.navigate(\"Add Card\", { deck: state[deck] })}\n        >\n          <Text>Add Card</Text>\n        </TouchableOpacity>\n        <TouchableOpacity\n          onPress={() => navigation.navigate(\"Quiz\", { deck: state[deck] })}\n        >\n          <Text style={Styles.button}>Start Quiz</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={removeDeck}>\n          <Text style={Styles.delete}>Delete Deck</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\n\nexport default DeckDetail;\n// export class DeckDetail extends Component {\n  \n\n//   shouldComponentUpdate(nextProps) {\n//     return nextProps.deck !== undefined;\n//   }\n//   handleDelete = id => {\n//     const { removeDeck, navigation } = this.props;\n\n//     removeDeck(id);\n//     removeDeckAS(id);\n\n//     navigation.goBack();\n//   };\n//   render() {\n//     const { deck } = this.props;\n\n//     return (\n//       <View style={styles.container}>\n//         <Deck id={deck.title} />\n//         <View>\n//           <TouchButton\n//             btnStyle={{ backgroundColor: white, borderColor: textGray }}\n//             txtStyle={{ color: textGray }}\n//             onPress={() =>\n//               this.props.navigation.navigate('AddCard', { title: deck.title })\n//             }\n//           >\n//             Add Card\n//           </TouchButton>\n//           <TouchButton\n//             btnStyle={{ backgroundColor: green, borderColor: white }}\n//             txtStyle={{ color: white }}\n//             onPress={() =>\n//               this.props.navigation.navigate('Quiz', { title: deck.title })\n//             }\n//           >\n//             Start Quiz\n//           </TouchButton>\n//         </View>\n//         <TextButton\n//           txtStyle={{ color: red }}\n//           onPress={() => this.handleDelete(deck.title)}\n//         >\n//           Delete Deck\n//         </TextButton>\n//       </View>\n//     );\n//   }\n// }\n\n// const styles = StyleSheet.create({\n//   container: {\n//     flex: 1,\n//     justifyContent: 'space-around',\n//     paddingTop: 16,\n//     paddingLeft: 16,\n//     paddingRight: 16,\n//     paddingBottom: 16,\n//     backgroundColor: gray\n//   }\n// });\n\n// const mapStateToProps = (state,props) => {\n//   // const title = navigation.route.params.title\n//   // navigation.getParam('title', 'undefined');\n//   // this.props.route.params\n//   const deck = state[this.props.navigation.title];\n\n//   return {\n//     deck\n//   };\n// };\n\n// export default connect(mapStateToProps,{ removeDeck })(DeckDetail);"]},"metadata":{},"sourceType":"module"}