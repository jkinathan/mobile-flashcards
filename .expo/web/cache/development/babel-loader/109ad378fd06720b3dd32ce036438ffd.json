{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { decks } from \"./_Data\";\nvar DECKS_STORAGE_KEY = 'MobileFlashcards:decks';\nexport function getData() {\n  return decks;\n}\n\nfunction formatDeckResults(results) {\n  return results === null ? decks : JSON.parse(results);\n}\n\nexport function getDecksOld() {\n  return AsyncStorage.getItem(DECKS_STORAGE_KEY).then(formatDeckResults);\n}\nexport function getDecks() {\n  var storeResults;\n  return _regeneratorRuntime.async(function getDecks$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(DECKS_STORAGE_KEY));\n\n        case 3:\n          storeResults = _context.sent;\n          console.log(\"storange api\", storeResults);\n\n          if (storeResults === null) {\n            AsyncStorage.setItem(DECKS_STORAGE_KEY, JSON.stringify(decks));\n          }\n\n          return _context.abrupt(\"return\", storeResults === null ? decks : JSON.parse(storeResults));\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 9]], Promise);\n}\nexport function getDeck(id) {\n  var storeResults;\n  return _regeneratorRuntime.async(function getDeck$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(DECKS_STORAGE_KEY));\n\n        case 3:\n          storeResults = _context2.sent;\n          return _context2.abrupt(\"return\", JSON.parse(storeResults)[id]);\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(_context2.t0);\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n}\nexport function saveDeckTitleAS(title) {\n  return _regeneratorRuntime.async(function saveDeckTitleAS$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.mergeItem(DECKS_STORAGE_KEY, JSON.stringify(_defineProperty({}, title, {\n            title: title,\n            questions: []\n          }))));\n\n        case 3:\n          _context3.next = 8;\n          break;\n\n        case 5:\n          _context3.prev = 5;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0);\n\n        case 8:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 5]], Promise);\n}\nexport function removeDeckAS(key) {\n  var results, data;\n  return _regeneratorRuntime.async(function removeDeckAS$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(DECKS_STORAGE_KEY));\n\n        case 3:\n          results = _context4.sent;\n          data = JSON.parse(results);\n          data[key] = undefined;\n          delete data[key];\n          AsyncStorage.setItem(DECKS_STORAGE_KEY, JSON.stringify(data));\n          _context4.next = 13;\n          break;\n\n        case 10:\n          _context4.prev = 10;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.log(_context4.t0);\n\n        case 13:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[0, 10]], Promise);\n}\nexport function addCardToDeckAS(title, card) {\n  var deck;\n  return _regeneratorRuntime.async(function addCardToDeckAS$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return _regeneratorRuntime.awrap(getDeck(title));\n\n        case 3:\n          deck = _context5.sent;\n          _context5.next = 6;\n          return _regeneratorRuntime.awrap(AsyncStorage.mergeItem(DECKS_STORAGE_KEY, JSON.stringify(_defineProperty({}, title, {\n            questions: _toConsumableArray(deck.questions).concat(card)\n          }))));\n\n        case 6:\n          _context5.next = 11;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.log(_context5.t0);\n\n        case 11:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n}\nexport function resetDecks() {\n  return _regeneratorRuntime.async(function resetDecks$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(DECKS_STORAGE_KEY, JSON.stringify(decks)));\n\n        case 3:\n          _context6.next = 8;\n          break;\n\n        case 5:\n          _context6.prev = 5;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.log(_context6.t0);\n\n        case 8:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, [[0, 5]], Promise);\n}","map":{"version":3,"sources":["/home/kinathan/Desktop/retribution/mobile-flashcards/utilities/api.js"],"names":["AsyncStorage","decks","DECKS_STORAGE_KEY","getData","formatDeckResults","results","JSON","parse","getDecksOld","getItem","then","getDecks","storeResults","console","log","setItem","stringify","getDeck","id","saveDeckTitleAS","title","mergeItem","questions","removeDeckAS","key","data","undefined","addCardToDeckAS","card","deck","concat","resetDecks"],"mappings":"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","sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage'\nimport { decks } from './_Data';\n\nconst DECKS_STORAGE_KEY = 'MobileFlashcards:decks';\n\nexport function getData() {\n  return decks;\n}\n\nfunction formatDeckResults(results) {\n  return results === null ? decks : JSON.parse(results);\n}\n\nexport function getDecksOld() {\n\n  return AsyncStorage.getItem(DECKS_STORAGE_KEY).then(formatDeckResults);\n  \n}\n\nexport async function getDecks() {\n  try {\n    const storeResults = await AsyncStorage.getItem(DECKS_STORAGE_KEY);\n\n    console.log(\"storange api\", storeResults)\n    if (storeResults === null) {\n      AsyncStorage.setItem(DECKS_STORAGE_KEY, JSON.stringify(decks));\n    }\n\n    return storeResults === null ? decks : JSON.parse(storeResults);\n  } \n  catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getDeck(id) {\n  try {\n    const storeResults = await AsyncStorage.getItem(DECKS_STORAGE_KEY);\n\n    return JSON.parse(storeResults)[id];\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function saveDeckTitleAS(title) {\n  try {\n    await AsyncStorage.mergeItem(\n      DECKS_STORAGE_KEY,\n      JSON.stringify({\n        [title]: {\n          title,\n          questions: []\n        }\n      })\n    );\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function removeDeckAS(key) {\n  try {\n    const results = await AsyncStorage.getItem(DECKS_STORAGE_KEY);\n    const data = JSON.parse(results);\n    data[key] = undefined;\n    delete data[key];\n    AsyncStorage.setItem(DECKS_STORAGE_KEY, JSON.stringify(data));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function addCardToDeckAS(title, card) {\n  try {\n    const deck = await getDeck(title);\n\n    await AsyncStorage.mergeItem(\n      DECKS_STORAGE_KEY,\n      JSON.stringify({\n        [title]: {\n          questions: [...deck.questions].concat(card)\n        }\n      })\n    );\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function resetDecks() {\n  try {\n    await AsyncStorage.setItem(DECKS_STORAGE_KEY, JSON.stringify(decks));\n  } catch (error) {\n    console.log(error);\n  }\n}"]},"metadata":{},"sourceType":"module"}