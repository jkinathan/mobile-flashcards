{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as Notifications from 'expo-notifications';\nimport * as Permissions from 'expo-permissions';\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nvar NOTIFICATION_KEY = 'NOTIFICATION_KEY';\nvar CHANNEL_ID = 'DailyReminder';\nexport var clearLocalNotification = function clearLocalNotification() {\n  return _regeneratorRuntime.async(function clearLocalNotification$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", AsyncStorage.removeItem(NOTIFICATION_KEY).then(Notifications.cancelAllScheduledNotificationsAsync));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nfunction createNotification() {\n  return {\n    title: 'Practice for today!',\n    body: \"ðŸ‘‹ don't forget to revise your flashcards for today!\",\n    ios: {\n      sound: true\n    },\n    android: {\n      sound: true,\n      priority: 'high',\n      sticky: false,\n      vibrate: true\n    }\n  };\n}\n\nexport function setLocalNotification() {\n  AsyncStorage.getItem(NOTIFICATION_KEY).then(JSON.parse).then(function (data) {\n    if (data === null) {\n      Permissions.askAsync(Permissions.NOTIFICATIONS).then(function (_ref) {\n        var status = _ref.status;\n\n        if (status === 'granted') {\n          Notifications.cancelAllScheduledNotificationsAsync();\n          var tomorrow = new Date();\n          tomorrow.setDate(tomorrow.getDate() + 1);\n          tomorrow.setHours(14);\n          tomorrow.setMinutes(0);\n          Notifications.scheduleNotificationAsync(createNotification(), {\n            time: tomorrow,\n            repeat: 'day'\n          });\n          AsyncStorage.setItem(NOTIFICATION_KEY, JSON.stringify(true));\n        }\n      });\n    }\n  });\n}","map":{"version":3,"sources":["/home/kinathan/Desktop/retribution/mobile-flashcards/utilities/helpers.js"],"names":["Notifications","Permissions","AsyncStorage","NOTIFICATION_KEY","CHANNEL_ID","clearLocalNotification","removeItem","then","cancelAllScheduledNotificationsAsync","createNotification","title","body","ios","sound","android","priority","sticky","vibrate","setLocalNotification","getItem","JSON","parse","data","askAsync","NOTIFICATIONS","status","tomorrow","Date","setDate","getDate","setHours","setMinutes","scheduleNotificationAsync","time","repeat","setItem","stringify"],"mappings":";AAAA,OAAO,KAAKA,aAAZ,MAA+B,oBAA/B;AACA,OAAO,KAAKC,WAAZ,MAA6B,kBAA7B;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AAEA,IAAMC,gBAAgB,GAAG,kBAAzB;AACA,IAAMC,UAAU,GAAG,eAAnB;AAEA,OAAO,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB;AAAA;AAAA;AAAA;AAAA;AAAA,2CAC7BH,YAAY,CAACI,UAAb,CAAwBH,gBAAxB,EACJI,IADI,CACCP,aAAa,CAACQ,oCADf,CAD6B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA/B;;AAWP,SAASC,kBAAT,GAA+B;AAC7B,SAAO;AACLC,IAAAA,KAAK,EAAE,qBADF;AAELC,IAAAA,IAAI,EAAE,sDAFD;AAGLC,IAAAA,GAAG,EAAE;AACHC,MAAAA,KAAK,EAAE;AADJ,KAHA;AAMLC,IAAAA,OAAO,EAAE;AACPD,MAAAA,KAAK,EAAE,IADA;AAEPE,MAAAA,QAAQ,EAAE,MAFH;AAGPC,MAAAA,MAAM,EAAE,KAHD;AAIPC,MAAAA,OAAO,EAAE;AAJF;AANJ,GAAP;AAaD;;AAGC,OAAO,SAASC,oBAAT,GAAiC;AACtChB,EAAAA,YAAY,CAACiB,OAAb,CAAqBhB,gBAArB,EACGI,IADH,CACQa,IAAI,CAACC,KADb,EAEGd,IAFH,CAEQ,UAACe,IAAD,EAAU;AACd,QAAIA,IAAI,KAAK,IAAb,EAAmB;AACjBrB,MAAAA,WAAW,CAACsB,QAAZ,CAAqBtB,WAAW,CAACuB,aAAjC,EACGjB,IADH,CACQ,gBAAgB;AAAA,YAAbkB,MAAa,QAAbA,MAAa;;AACpB,YAAIA,MAAM,KAAK,SAAf,EAA0B;AACxBzB,UAAAA,aAAa,CAACQ,oCAAd;AACA,cAAIkB,QAAQ,GAAG,IAAIC,IAAJ,EAAf;AACAD,UAAAA,QAAQ,CAACE,OAAT,CAAiBF,QAAQ,CAACG,OAAT,KAAqB,CAAtC;AACAH,UAAAA,QAAQ,CAACI,QAAT,CAAkB,EAAlB;AACAJ,UAAAA,QAAQ,CAACK,UAAT,CAAoB,CAApB;AAEA/B,UAAAA,aAAa,CAACgC,yBAAd,CACEvB,kBAAkB,EADpB,EAEE;AACEwB,YAAAA,IAAI,EAAEP,QADR;AAEEQ,YAAAA,MAAM,EAAE;AAFV,WAFF;AAQAhC,UAAAA,YAAY,CAACiC,OAAb,CAAqBhC,gBAArB,EAAuCiB,IAAI,CAACgB,SAAL,CAAe,IAAf,CAAvC;AACD;AACF,OAnBH;AAoBD;AACF,GAzBH;AA0BD","sourcesContent":["import * as Notifications from 'expo-notifications'\nimport * as Permissions from 'expo-permissions';\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nconst NOTIFICATION_KEY = 'NOTIFICATION_KEY';\nconst CHANNEL_ID = 'DailyReminder';\n\nexport const clearLocalNotification = async ()=> {\n  return AsyncStorage.removeItem(NOTIFICATION_KEY)\n    .then(Notifications.cancelAllScheduledNotificationsAsync);\n}\n\n// export function clearLocalNotification() {\n//   return AsyncStorage.removeItem(NOTIFICATION_KEY).then(\n//     Notifications.cancelAllScheduledNotificationsAsync\n//   );\n// }\n\nfunction createNotification () {\n  return {\n    title: 'Practice for today!',\n    body: \"ðŸ‘‹ don't forget to revise your flashcards for today!\",\n    ios: {\n      sound: true,\n    },\n    android: {\n      sound: true,\n      priority: 'high',\n      sticky: false,\n      vibrate: true,\n    }\n  }\n}\n\n  \n  export function setLocalNotification () {\n    AsyncStorage.getItem(NOTIFICATION_KEY)\n      .then(JSON.parse)\n      .then((data) => {\n        if (data === null) {\n          Permissions.askAsync(Permissions.NOTIFICATIONS)\n            .then(({ status }) => {\n              if (status === 'granted') {\n                Notifications.cancelAllScheduledNotificationsAsync()\n                let tomorrow = new Date()\n                tomorrow.setDate(tomorrow.getDate() + 1)\n                tomorrow.setHours(14)\n                tomorrow.setMinutes(0)\n  \n                Notifications.scheduleNotificationAsync(\n                  createNotification(),\n                  {\n                    time: tomorrow,\n                    repeat: 'day',\n                  }\n                )\n  \n                AsyncStorage.setItem(NOTIFICATION_KEY, JSON.stringify(true))\n              }\n            })\n        }\n      })\n  }"]},"metadata":{},"sourceType":"module"}