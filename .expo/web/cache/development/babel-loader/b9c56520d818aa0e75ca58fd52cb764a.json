{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { decks } from \"./_Data\";\nvar DECKS_STORAGE_KEY = 'MobileFlashcards:decks';\nexport var ANSWER_KEY = new Date().getFullYear().toString() + new Date().getMonth().toString() + new Date().getDate().toString();\nexport var AnswerQustion = function AnswerQustion(_ref) {\n  var deck, question, passed, key;\n  return _regeneratorRuntime.async(function AnswerQustion$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          deck = _ref.deck, question = _ref.question, passed = _ref.passed;\n          key = deck + \" \" + question;\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.mergeItem(ANSWER_KEY, JSON.stringify(_defineProperty({}, key, passed))));\n\n        case 4:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport function getData() {\n  return decks;\n}\n\nfunction formatDeckResults(results) {\n  return results === null ? decks : JSON.parse(results);\n}\n\nexport function getDecksOld() {\n  return AsyncStorage.getItem(DECKS_STORAGE_KEY).then(formatDeckResults);\n}\nexport function getDecks() {\n  var storeResults;\n  return _regeneratorRuntime.async(function getDecks$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(DECKS_STORAGE_KEY));\n\n        case 3:\n          storeResults = _context2.sent;\n\n          if (storeResults === null) {\n            AsyncStorage.setItem(DECKS_STORAGE_KEY, JSON.stringify(decks));\n          }\n\n          return _context2.abrupt(\"return\", storeResults === null ? decks : JSON.parse(storeResults));\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(_context2.t0);\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n}\nexport function getDeck(id) {\n  var storeResults;\n  return _regeneratorRuntime.async(function getDeck$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(DECKS_STORAGE_KEY));\n\n        case 3:\n          storeResults = _context3.sent;\n          return _context3.abrupt(\"return\", JSON.parse(storeResults)[id]);\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0);\n\n        case 10:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n}\nexport function saveDeckTitleAS(title) {\n  return _regeneratorRuntime.async(function saveDeckTitleAS$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.mergeItem(DECKS_STORAGE_KEY, JSON.stringify(_defineProperty({}, title, {\n            title: title,\n            questions: []\n          }))));\n\n        case 3:\n          _context4.next = 8;\n          break;\n\n        case 5:\n          _context4.prev = 5;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.log(_context4.t0);\n\n        case 8:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[0, 5]], Promise);\n}\nexport function removeDeckAS(key) {\n  var results, data;\n  return _regeneratorRuntime.async(function removeDeckAS$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(DECKS_STORAGE_KEY));\n\n        case 3:\n          results = _context5.sent;\n          data = JSON.parse(results);\n          data[key] = undefined;\n          delete data[key];\n          AsyncStorage.setItem(DECKS_STORAGE_KEY, JSON.stringify(data));\n          _context5.next = 13;\n          break;\n\n        case 10:\n          _context5.prev = 10;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.log(_context5.t0);\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[0, 10]], Promise);\n}\nexport function addCardToDeckAS(title, card) {\n  var deck;\n  return _regeneratorRuntime.async(function addCardToDeckAS$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return _regeneratorRuntime.awrap(getDeck(title));\n\n        case 3:\n          deck = _context6.sent;\n          _context6.next = 6;\n          return _regeneratorRuntime.awrap(AsyncStorage.mergeItem(DECKS_STORAGE_KEY, JSON.stringify(_defineProperty({}, title, {\n            questions: _toConsumableArray(deck.questions).concat(card)\n          }))));\n\n        case 6:\n          _context6.next = 11;\n          break;\n\n        case 8:\n          _context6.prev = 8;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.log(_context6.t0);\n\n        case 11:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n}\nexport function resetDecks() {\n  return _regeneratorRuntime.async(function resetDecks$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(DECKS_STORAGE_KEY, JSON.stringify(decks)));\n\n        case 3:\n          _context7.next = 8;\n          break;\n\n        case 5:\n          _context7.prev = 5;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.log(_context7.t0);\n\n        case 8:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, [[0, 5]], Promise);\n}","map":{"version":3,"sources":["/home/kinathan/Desktop/retribution/mobile-flashcards/utilities/api.js"],"names":["AsyncStorage","decks","DECKS_STORAGE_KEY","ANSWER_KEY","Date","getFullYear","toString","getMonth","getDate","AnswerQustion","deck","question","passed","key","mergeItem","JSON","stringify","getData","formatDeckResults","results","parse","getDecksOld","getItem","then","getDecks","storeResults","setItem","console","log","getDeck","id","saveDeckTitleAS","title","questions","removeDeckAS","data","undefined","addCardToDeckAS","card","concat","resetDecks"],"mappings":"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","sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage'\nimport { decks } from './_Data';\n\nconst DECKS_STORAGE_KEY = 'MobileFlashcards:decks';\n\nexport const ANSWER_KEY =\n  new Date().getFullYear().toString() +\n  new Date().getMonth().toString() +\n  new Date().getDate().toString();\n\n  export const AnswerQustion = async ({ deck, question, passed }) => {\n    const key = deck + \" \" + question;\n    return await AsyncStorage.mergeItem(\n      ANSWER_KEY,\n      JSON.stringify({ [key]: passed })\n    );\n  };\n  \nexport function getData() {\n  return decks;\n}\n\nfunction formatDeckResults(results) {\n  return results === null ? decks : JSON.parse(results);\n}\n\nexport function getDecksOld() {\n\n  return AsyncStorage.getItem(DECKS_STORAGE_KEY).then(formatDeckResults);\n  \n}\n\n\nexport async function getDecks() {\n  try {\n    const storeResults = await AsyncStorage.getItem(DECKS_STORAGE_KEY);\n\n    \n    if (storeResults === null) {\n      AsyncStorage.setItem(DECKS_STORAGE_KEY, JSON.stringify(decks));\n    }\n\n    return storeResults === null ? decks : JSON.parse(storeResults);\n  } \n  catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getDeck(id) {\n  try {\n    const storeResults = await AsyncStorage.getItem(DECKS_STORAGE_KEY);\n\n    return JSON.parse(storeResults)[id];\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function saveDeckTitleAS(title) {\n  try {\n    await AsyncStorage.mergeItem(\n      DECKS_STORAGE_KEY,\n      JSON.stringify({\n        [title]: {\n          title,\n          questions: []\n        }\n      })\n    );\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function removeDeckAS(key) {\n  try {\n    const results = await AsyncStorage.getItem(DECKS_STORAGE_KEY);\n    const data = JSON.parse(results);\n    data[key] = undefined;\n    delete data[key];\n    AsyncStorage.setItem(DECKS_STORAGE_KEY, JSON.stringify(data));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function addCardToDeckAS(title, card) {\n  try {\n    const deck = await getDeck(title);\n\n    await AsyncStorage.mergeItem(\n      DECKS_STORAGE_KEY,\n      JSON.stringify({\n        [title]: {\n          questions: [...deck.questions].concat(card)\n        }\n      })\n    );\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function resetDecks() {\n  try {\n    await AsyncStorage.setItem(DECKS_STORAGE_KEY, JSON.stringify(decks));\n  } catch (error) {\n    console.log(error);\n  }\n}"]},"metadata":{},"sourceType":"module"}