{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { ViewPagerAndroid } from \"react-native-web/dist/index\";\nimport TextButton from \"./TextButton\";\nimport TouchButton from \"./TouchButton\";\nimport { gray, green, red, textGray, darkGray, white } from \"../utils/colors\";\nimport { connect } from 'react-redux';\nimport { withNavigation } from 'react-navigation';\nvar screen = {\n  QUESTION: 'question',\n  ANSWER: 'answer',\n  RESULT: 'result'\n};\nvar answer = {\n  CORRECT: 'correct',\n  INCORRECT: 'incorrect'\n};\nexport var StartQuiz = function (_Component) {\n  _inherits(StartQuiz, _Component);\n\n  var _super = _createSuper(StartQuiz);\n\n  function StartQuiz() {\n    var _this;\n\n    _classCallCheck(this, StartQuiz);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      show: screen.QUESTION,\n      correct: 0,\n      incorrect: 0,\n      questionCount: _this.props.deck.questions.length,\n      answered: Array(_this.props.deck.questions.length).fill(0)\n    };\n\n    _this.handlePageChange = function (evt) {\n      _this.setState({\n        show: screen.QUESTION\n      });\n    };\n\n    _this.handleAnswer = function (response, page) {\n      if (response === answer.CORRECT) {\n        _this.setState(function (prevState) {\n          return {\n            correct: prevState.correct + 1\n          };\n        });\n      } else {\n        _this.setState(function (prevState) {\n          return {\n            incorrect: prevState.incorrect + 1\n          };\n        });\n      }\n\n      _this.setState(function (prevState) {\n        return {\n          answered: prevState.answered.map(function (val, idx) {\n            return page === idx ? 1 : val;\n          })\n        };\n      }, function () {\n        var _this$state = _this.state,\n            correct = _this$state.correct,\n            incorrect = _this$state.incorrect,\n            questionCount = _this$state.questionCount;\n\n        if (questionCount === correct + incorrect) {\n          _this.setState({\n            show: screen.RESULT\n          });\n        } else {\n          _this.viewPager.setPage(page + 1);\n\n          _this.setState(function (prevState) {\n            return {\n              show: screen.QUESTION\n            };\n          });\n        }\n      });\n    };\n\n    _this.handleReset = function () {\n      _this.setState(function (prevState) {\n        return {\n          show: screen.QUESTION,\n          correct: 0,\n          incorrect: 0,\n          answered: Array(prevState.questionCount).fill(0)\n        };\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(StartQuiz, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var questions = this.props.deck.questions;\n      var show = this.state.show;\n\n      if (questions.length === 0) {\n        return React.createElement(View, {\n          style: styles.pageStyle\n        }, React.createElement(View, {\n          style: styles.block\n        }, React.createElement(Text, {\n          style: [styles.count, {\n            textAlign: 'center'\n          }]\n        }, \"You cannot take a quiz because there are no cards in the deck.\"), React.createElement(Text, {\n          style: [styles.count, {\n            textAlign: 'center'\n          }]\n        }, \"Please add some cards and try again.\")));\n      }\n\n      if (this.state.show === screen.RESULT) {\n        var _this$state2 = this.state,\n            correct = _this$state2.correct,\n            questionCount = _this$state2.questionCount;\n        var percent = (correct / questionCount * 100).toFixed(0);\n        var resultStyle = percent >= 70 ? styles.resultTextGood : styles.resultTextBad;\n        return React.createElement(View, {\n          style: styles.pageStyle\n        }, React.createElement(View, {\n          style: styles.block\n        }, React.createElement(Text, {\n          style: [styles.count, {\n            textAlign: 'center'\n          }]\n        }, \"Quiz Complete!\"), React.createElement(Text, {\n          style: resultStyle\n        }, correct, \" / \", questionCount, \" correct\")), React.createElement(View, {\n          style: styles.block\n        }, React.createElement(Text, {\n          style: [styles.count, {\n            textAlign: 'center'\n          }]\n        }, \"Percentage correct\"), React.createElement(Text, {\n          style: resultStyle\n        }, percent, \"%\")), React.createElement(View, null, React.createElement(TouchButton, {\n          btnStyle: {\n            backgroundColor: green,\n            borderColor: white\n          },\n          onPress: this.handleReset\n        }, \"Restart Quiz\"), React.createElement(TouchButton, {\n          btnStyle: {\n            backgroundColor: gray,\n            borderColor: textGray\n          },\n          txtStyle: {\n            color: textGray\n          },\n          onPress: function onPress() {\n            _this2.handleReset();\n\n            _this2.props.navigation.goBack();\n          }\n        }, \"Back To Deck\"), React.createElement(TouchButton, {\n          btnStyle: {\n            backgroundColor: gray,\n            borderColor: textGray\n          },\n          txtStyle: {\n            color: textGray\n          },\n          onPress: function onPress() {\n            _this2.handleReset();\n\n            _this2.props.navigation.navigate('Home');\n          }\n        }, \"Home\")));\n      }\n\n      return React.createElement(ViewPagerAndroid, {\n        style: styles.container,\n        scrollEnabled: true,\n        onPageSelected: this.handlePageChange,\n        ref: function ref(viewPager) {\n          _this2.viewPager = viewPager;\n        }\n      }, questions.map(function (question, idx) {\n        return React.createElement(View, {\n          style: styles.pageStyle,\n          key: idx\n        }, React.createElement(View, {\n          style: styles.block\n        }, React.createElement(Text, {\n          style: styles.count\n        }, idx + 1, \" / \", questions.length)), React.createElement(View, {\n          style: [styles.block, styles.questionContainer]\n        }, React.createElement(Text, {\n          style: styles.questionText\n        }, show === screen.QUESTION ? 'Question' : 'Answer'), React.createElement(View, {\n          style: styles.questionWrapper\n        }, React.createElement(Text, {\n          style: styles.title\n        }, show === screen.QUESTION ? question.question : question.answer))), show === screen.QUESTION ? React.createElement(TextButton, {\n          txtStyle: {\n            color: red\n          },\n          onPress: function onPress() {\n            return _this2.setState({\n              show: screen.ANSWER\n            });\n          }\n        }, \"Show Answer\") : React.createElement(TextButton, {\n          txtStyle: {\n            color: red\n          },\n          onPress: function onPress() {\n            return _this2.setState({\n              show: screen.QUESTION\n            });\n          }\n        }, \"Show Question\"), React.createElement(View, null, React.createElement(TouchButton, {\n          btnStyle: {\n            backgroundColor: green,\n            borderColor: white\n          },\n          onPress: function onPress() {\n            return _this2.handleAnswer(answer.CORRECT, idx);\n          },\n          disabled: _this2.state.answered[idx] === 1\n        }, \"Correct\"), React.createElement(TouchButton, {\n          btnStyle: {\n            backgroundColor: red,\n            borderColor: white\n          },\n          onPress: function onPress() {\n            return _this2.handleAnswer(answer.INCORRECT, idx);\n          },\n          disabled: _this2.state.answered[idx] === 1\n        }, \"Incorrect\")));\n      }));\n    }\n  }]);\n\n  return StartQuiz;\n}(Component);\nStartQuiz.propTypes = {\n  navigation: PropTypes.object.isRequired,\n  deck: PropTypes.object.isRequired\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  pageStyle: {\n    flex: 1,\n    paddingTop: 16,\n    paddingLeft: 16,\n    paddingRight: 16,\n    paddingBottom: 16,\n    backgroundColor: gray,\n    justifyContent: 'space-around'\n  },\n  block: {\n    marginBottom: 20\n  },\n  count: {\n    fontSize: 24\n  },\n  title: {\n    fontSize: 32,\n    textAlign: 'center'\n  },\n  questionContainer: {\n    borderWidth: 1,\n    borderColor: darkGray,\n    backgroundColor: white,\n    borderRadius: 5,\n    paddingTop: 20,\n    paddingBottom: 20,\n    paddingLeft: 16,\n    paddingRight: 16,\n    flexGrow: 1\n  },\n  questionWrapper: {\n    flex: 1,\n    justifyContent: 'center'\n  },\n  questionText: {\n    textDecorationLine: 'underline',\n    textAlign: 'center',\n    fontSize: 20\n  },\n  resultTextGood: {\n    color: green,\n    fontSize: 46,\n    textAlign: 'center'\n  },\n  resultTextBad: {\n    color: red,\n    fontSize: 46,\n    textAlign: 'center'\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state, _ref) {\n  var title = _ref.title;\n  var deck = state[title];\n  return {\n    deck: deck\n  };\n};\n\nexport default withNavigation(connect(mapStateToProps)(StartQuiz));","map":{"version":3,"sources":["/home/kinathan/Desktop/retribution/mobile-flashcards/components/Quiz.js"],"names":["React","Component","PropTypes","ViewPagerAndroid","TextButton","TouchButton","gray","green","red","textGray","darkGray","white","connect","withNavigation","screen","QUESTION","ANSWER","RESULT","answer","CORRECT","INCORRECT","StartQuiz","state","show","correct","incorrect","questionCount","props","deck","questions","length","answered","Array","fill","handlePageChange","evt","setState","handleAnswer","response","page","prevState","map","val","idx","viewPager","setPage","handleReset","styles","pageStyle","block","count","textAlign","percent","toFixed","resultStyle","resultTextGood","resultTextBad","backgroundColor","borderColor","color","navigation","goBack","navigate","container","question","questionContainer","questionText","questionWrapper","title","propTypes","object","isRequired","StyleSheet","create","flex","paddingTop","paddingLeft","paddingRight","paddingBottom","justifyContent","marginBottom","fontSize","borderWidth","borderRadius","flexGrow","textDecorationLine","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { View, Text, StyleSheet, ViewPagerAndroid } from 'react-native';\nimport TextButton from './TextButton';\nimport TouchButton from './TouchButton';\nimport { gray, green, red, textGray, darkGray, white } from '../utils/colors';\nimport { connect } from 'react-redux';\nimport { withNavigation } from 'react-navigation';\n\nconst screen = {\n  QUESTION: 'question',\n  ANSWER: 'answer',\n  RESULT: 'result'\n};\nconst answer = {\n  CORRECT: 'correct',\n  INCORRECT: 'incorrect'\n};\n\nexport class StartQuiz extends Component {\n  static propTypes = {\n    navigation: PropTypes.object.isRequired,\n    deck: PropTypes.object.isRequired\n  };\n  state = {\n    show: screen.QUESTION,\n    correct: 0,\n    incorrect: 0,\n    questionCount: this.props.deck.questions.length,\n    answered: Array(this.props.deck.questions.length).fill(0)\n  };\n  handlePageChange = evt => {\n    // console.log('evt.nativeEvent.position', evt.nativeEvent.position);\n    this.setState({\n      show: screen.QUESTION\n    });\n  };\n  handleAnswer = (response, page) => {\n    if (response === answer.CORRECT) {\n      this.setState(prevState => ({ correct: prevState.correct + 1 }));\n    } else {\n      this.setState(prevState => ({ incorrect: prevState.incorrect + 1 }));\n    }\n    this.setState(\n      prevState => ({\n        answered: prevState.answered.map((val, idx) => (page === idx ? 1 : val))\n      }),\n      () => {\n        // console.log('this.state.answered', this.state.answered);\n        const { correct, incorrect, questionCount } = this.state;\n\n        if (questionCount === correct + incorrect) {\n          this.setState({ show: screen.RESULT });\n        } else {\n          // console.log('this.state.page', this.state.page);\n          this.viewPager.setPage(page + 1);\n          this.setState(prevState => ({\n            show: screen.QUESTION\n          }));\n        }\n      }\n    );\n  };\n  handleReset = () => {\n    this.setState(prevState => ({\n      show: screen.QUESTION,\n      correct: 0,\n      incorrect: 0,\n      answered: Array(prevState.questionCount).fill(0)\n    }));\n  };\n  render() {\n    const { questions } = this.props.deck;\n    const { show } = this.state;\n\n    if (questions.length === 0) {\n      return (\n        <View style={styles.pageStyle}>\n          <View style={styles.block}>\n            <Text style={[styles.count, { textAlign: 'center' }]}>\n              You cannot take a quiz because there are no cards in the deck.\n            </Text>\n            <Text style={[styles.count, { textAlign: 'center' }]}>\n              Please add some cards and try again.\n            </Text>\n          </View>\n        </View>\n      );\n    }\n\n    if (this.state.show === screen.RESULT) {\n      const { correct, questionCount } = this.state;\n      const percent = ((correct / questionCount) * 100).toFixed(0);\n      const resultStyle =\n        percent >= 70 ? styles.resultTextGood : styles.resultTextBad;\n\n      return (\n        <View style={styles.pageStyle}>\n          <View style={styles.block}>\n            <Text style={[styles.count, { textAlign: 'center' }]}>\n              Quiz Complete!\n            </Text>\n            <Text style={resultStyle}>\n              {correct} / {questionCount} correct\n            </Text>\n          </View>\n          <View style={styles.block}>\n            <Text style={[styles.count, { textAlign: 'center' }]}>\n              Percentage correct\n            </Text>\n            <Text style={resultStyle}>{percent}%</Text>\n          </View>\n          <View>\n            <TouchButton\n              btnStyle={{ backgroundColor: green, borderColor: white }}\n              onPress={this.handleReset}\n            >\n              Restart Quiz\n            </TouchButton>\n            <TouchButton\n              btnStyle={{ backgroundColor: gray, borderColor: textGray }}\n              txtStyle={{ color: textGray }}\n              onPress={() => {\n                this.handleReset();\n                this.props.navigation.goBack();\n              }}\n            >\n              Back To Deck\n            </TouchButton>\n            <TouchButton\n              btnStyle={{ backgroundColor: gray, borderColor: textGray }}\n              txtStyle={{ color: textGray }}\n              onPress={() => {\n                this.handleReset();\n                this.props.navigation.navigate('Home');\n              }}\n            >\n              Home\n            </TouchButton>\n          </View>\n        </View>\n      );\n    }\n\n    return (\n      <ViewPagerAndroid\n        style={styles.container}\n        scrollEnabled={true}\n        onPageSelected={this.handlePageChange}\n        ref={viewPager => {\n          this.viewPager = viewPager;\n        }}\n      >\n        {questions.map((question, idx) => (\n          <View style={styles.pageStyle} key={idx}>\n            <View style={styles.block}>\n              <Text style={styles.count}>\n                {idx + 1} / {questions.length}\n              </Text>\n            </View>\n            <View style={[styles.block, styles.questionContainer]}>\n              <Text style={styles.questionText}>\n                {show === screen.QUESTION ? 'Question' : 'Answer'}\n              </Text>\n              <View style={styles.questionWrapper}>\n                <Text style={styles.title}>\n                  {show === screen.QUESTION\n                    ? question.question\n                    : question.answer}\n                </Text>\n              </View>\n            </View>\n            {show === screen.QUESTION ? (\n              <TextButton\n                txtStyle={{ color: red }}\n                onPress={() => this.setState({ show: screen.ANSWER })}\n              >\n                Show Answer\n              </TextButton>\n            ) : (\n              <TextButton\n                txtStyle={{ color: red }}\n                onPress={() => this.setState({ show: screen.QUESTION })}\n              >\n                Show Question\n              </TextButton>\n            )}\n            <View>\n              <TouchButton\n                btnStyle={{ backgroundColor: green, borderColor: white }}\n                onPress={() => this.handleAnswer(answer.CORRECT, idx)}\n                disabled={this.state.answered[idx] === 1}\n              >\n                Correct\n              </TouchButton>\n              <TouchButton\n                btnStyle={{ backgroundColor: red, borderColor: white }}\n                onPress={() => this.handleAnswer(answer.INCORRECT, idx)}\n                disabled={this.state.answered[idx] === 1}\n              >\n                Incorrect\n              </TouchButton>\n            </View>\n          </View>\n        ))}\n      </ViewPagerAndroid>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  pageStyle: {\n    flex: 1,\n    paddingTop: 16,\n    paddingLeft: 16,\n    paddingRight: 16,\n    paddingBottom: 16,\n    backgroundColor: gray,\n    justifyContent: 'space-around'\n  },\n  block: {\n    marginBottom: 20\n  },\n  count: {\n    fontSize: 24\n  },\n  title: {\n    fontSize: 32,\n    textAlign: 'center'\n  },\n  questionContainer: {\n    borderWidth: 1,\n    borderColor: darkGray,\n    backgroundColor: white,\n    borderRadius: 5,\n    paddingTop: 20,\n    paddingBottom: 20,\n    paddingLeft: 16,\n    paddingRight: 16,\n    flexGrow: 1\n  },\n  questionWrapper: {\n    flex: 1,\n    justifyContent: 'center'\n  },\n  questionText: {\n    textDecorationLine: 'underline',\n    textAlign: 'center',\n    fontSize: 20\n  },\n  resultTextGood: {\n    color: green,\n    fontSize: 46,\n    textAlign: 'center'\n  },\n  resultTextBad: {\n    color: red,\n    fontSize: 46,\n    textAlign: 'center'\n  }\n});\n\nconst mapStateToProps = (state, { title }) => {\n  const deck = state[title];\n\n  return {\n    deck\n  };\n};\n\nexport default withNavigation(connect(mapStateToProps)(StartQuiz));"]},"metadata":{},"sourceType":"module"}