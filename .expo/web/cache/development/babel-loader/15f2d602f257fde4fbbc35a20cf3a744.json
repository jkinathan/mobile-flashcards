{"ast":null,"code":"import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { createStore, applyMiddleware } from 'redux';\nimport MainNavigation from \"./Navigations/MainNavigation\";\nimport { Provider } from 'react-redux';\nimport reducer from \"./reducers\";\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport DeckList from \"../../components/DeckList\";\nimport AddDeck from \"../components/AddDeck\";\nimport AddCard from \"../components/AddCard\";\nimport { createStackNavigator } from '@react-navigation/stack';\nimport DeckDetail from \"../components/DeckDetail\";\nimport StartQuiz from \"../components/Quiz\";\nvar store = createStore(reducer, applyMiddleware(thunk, logger));\nvar Tab = createBottomTabNavigator();\nvar Stack = createStackNavigator();\n\nfunction DeckListStackScreen() {\n  return React.createElement(Stack.Navigator, null, React.createElement(Stack.Screen, {\n    name: \"DeckList\",\n    component: DeckList\n  }), React.createElement(Stack.Screen, {\n    name: \"DeckDetail\",\n    component: DeckDetail\n  }), React.createElement(Stack.Screen, {\n    name: \"Add Deck\",\n    component: AddDeck\n  }), React.createElement(Stack.Screen, {\n    name: \"AddCard\",\n    component: AddCard\n  }), React.createElement(Stack.Screen, {\n    name: \"StartQuiz\",\n    component: StartQuiz\n  }));\n}\n\nexport default function App() {\n  return React.createElement(Provider, {\n    store: store\n  }, React.createElement(View, {\n    style: styles.container\n  }, React.createElement(NavigationContainer, null, React.createElement(Tab.Navigator, {\n    screenOptions: ({\n      \"tabBarActiveTintColor\": \"tomato\",\n      \"tabBarInactiveTintColor\": \"gray\",\n      \"tabBarStyle\": [{\n        \"display\": \"flex\"\n      }, null]\n    }, function (_ref) {\n      var route = _ref.route;\n      return {\n        tabBarIcon: function tabBarIcon(_ref2) {\n          var focused = _ref2.focused,\n              color = _ref2.color,\n              size = _ref2.size;\n          var iconName;\n\n          if (route.name === 'DeckList') {\n            iconName = focused ? 'list' : 'list-outline';\n          } else if (route.name === 'Add Deck') {\n            iconName = focused ? 'add-circle' : 'add-circle-outline';\n          }\n\n          return React.createElement(Ionicons, {\n            name: iconName,\n            size: size,\n            color: color\n          });\n        }\n      };\n    })\n  }, React.createElement(Tab.Screen, {\n    name: \"DeckList\",\n    component: DeckListStackScreen\n  }), React.createElement(Tab.Screen, {\n    name: \"Add Deck\",\n    component: AddDeck\n  })))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/home/kinathan/Desktop/retribution/mobile-flashcards/App.js"],"names":["StatusBar","React","createStore","applyMiddleware","MainNavigation","Provider","reducer","thunk","logger","NavigationContainer","createBottomTabNavigator","DeckList","AddDeck","AddCard","createStackNavigator","DeckDetail","StartQuiz","store","Tab","Stack","DeckListStackScreen","App","styles","container","route","tabBarIcon","focused","color","size","iconName","name","StyleSheet","create","flex","backgroundColor","justifyContent"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { createStore, applyMiddleware } from 'redux';\nimport MainNavigation from './Navigations/MainNavigation';\nimport { Provider } from 'react-redux';\nimport reducer from './reducers';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\n\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport  DeckList  from '../../components/DeckList';\nimport AddDeck from '../components/AddDeck';\nimport AddCard from '../components/AddCard';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport DeckDetail from '../components/DeckDetail';\nimport StartQuiz from '../components/Quiz';\n\nconst store = createStore(\n  reducer,\n  applyMiddleware(thunk,logger)\n);\n\nconst Tab = createBottomTabNavigator();\nconst Stack = createStackNavigator();\n\n\n\nfunction DeckListStackScreen() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"DeckList\" component={DeckList} />\n      <Stack.Screen name=\"DeckDetail\" component={DeckDetail} />\n      <Stack.Screen name=\"Add Deck\" component={AddDeck} />\n      <Stack.Screen name=\"AddCard\" component={AddCard} />\n      <Stack.Screen name=\"StartQuiz\" component={StartQuiz} />\n\n    </Stack.Navigator>\n  );\n}\n\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <View style={styles.container}>\n        \n      <NavigationContainer>\n      \n          <Tab.Navigator\n          screenOptions={\n            {\n            \"tabBarActiveTintColor\": \"tomato\",\n            \"tabBarInactiveTintColor\": \"gray\",\n            \"tabBarStyle\": [{\"display\": \"flex\"},null]\n            }\n            ,\n            ({ route }) => ({\n            tabBarIcon: ({ focused, color, size }) => {\n            let iconName;\n            if (route.name === 'DeckList') {\n              iconName = focused\n              ? 'list'\n              : 'list-outline';\n            } else if (route.name === 'Add Deck') {\n              iconName = focused\n              ? 'add-circle'\n              : 'add-circle-outline';\n            }\n      \n      return <Ionicons name={iconName} size={size} color={color} \n                />;\n              },\n              \n              })\n              \n            }\n              >\n\n            <Tab.Screen name=\"DeckList\" component={DeckListStackScreen} />\n            <Tab.Screen name=\"Add Deck\" component={AddDeck} />\n          </Tab.Navigator>\n        </NavigationContainer>\n\n      </View>\n    </Provider>\n    \n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}