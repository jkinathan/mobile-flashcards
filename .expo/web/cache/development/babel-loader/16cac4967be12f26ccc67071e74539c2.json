{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { connect } from \"react-redux\";\nimport { clearLocalNotification, setLocalNotification } from \"../utils/helper\";\nimport { Button, Card, Icon, Text } from \"react-native-elements\";\nimport { commonStyles } from \"../utils/styles\";\nimport { default as Flashcard } from \"./Card\";\n\nvar StartQuiz = function (_Component) {\n  _inherits(StartQuiz, _Component);\n\n  var _super = _createSuper(StartQuiz);\n\n  function StartQuiz() {\n    var _this;\n\n    _classCallCheck(this, StartQuiz);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      score: 0,\n      currentQuestionId: 0,\n      shouldShowQuestion: true\n    };\n\n    _this.handleFlipCard = function () {\n      _this.setState(function (previousState) {\n        return {\n          shouldShowQuestion: !previousState.shouldShowQuestion\n        };\n      });\n    };\n\n    _this.handleResponse = function _callee(_ref) {\n      var isCorrect;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              isCorrect = _ref.isCorrect;\n\n              if (isCorrect === true) {\n                _this.setState(function (previousState) {\n                  return {\n                    score: previousState.score + 1\n                  };\n                });\n              }\n\n              _this.setState(function (previousState) {\n                return {\n                  currentQuestionId: previousState.currentQuestionId + 1,\n                  shouldShowQuestion: true\n                };\n              });\n\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(clearLocalNotification());\n\n            case 5:\n              setLocalNotification();\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(StartQuiz, [{\n    key: \"quiz\",\n    value: function quiz() {\n      var _this2 = this;\n\n      var deck = this.props.deck;\n      var currentQuestionId = this.state.currentQuestionId;\n      return React.createElement(ScrollView, {\n        style: commonStyles.genericTextContainer\n      }, React.createElement(Text, null, \"Quiz for deck: \", deck.title), React.createElement(Text, null, \"Question: \", currentQuestionId + 1, \" of \", deck.questions.length), React.createElement(Card, null, React.createElement(Flashcard, {\n        card: deck.questions[currentQuestionId],\n        shouldShowQuestion: this.state.shouldShowQuestion,\n        handleFlipCard: this.handleFlipCard\n      })), React.createElement(View, {\n        style: _objectSpread(_objectSpread({}, commonStyles.flashcardsButtonContainer), {}, {\n          flexDirection: \"row\"\n        })\n      }, React.createElement(Button, {\n        onPress: function onPress() {\n          _this2.handleResponse({\n            isCorrect: true\n          });\n        },\n        title: \"Correct\",\n        buttonStyle: {\n          backgroundColor: \"darkgreen\",\n          width: 120\n        },\n        icon: React.createElement(Icon, {\n          name: \"check-circle\",\n          size: 15,\n          color: \"white\",\n          iconStyle: {\n            marginRight: 5\n          }\n        })\n      }), React.createElement(View, {\n        style: {\n          width: 20\n        }\n      }), React.createElement(Button, {\n        onPress: function onPress() {\n          _this2.handleResponse({\n            isCorrect: false\n          });\n        },\n        title: \"Incorrect\",\n        buttonStyle: {\n          backgroundColor: \"darkred\",\n          width: 120\n        },\n        icon: React.createElement(Icon, {\n          name: \"cancel\",\n          size: 15,\n          color: \"white\",\n          iconStyle: {\n            marginRight: 5\n          }\n        })\n      })));\n    }\n  }, {\n    key: \"quizResult\",\n    value: function quizResult() {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          navigation = _this$props.navigation,\n          deck = _this$props.deck;\n      var score = 0;\n\n      if (deck.questions.length !== 0) {\n        score = Math.round(this.state.score / deck.questions.length * 10000) / 100;\n      }\n\n      return React.createElement(ScrollView, {\n        style: commonStyles.genericTextContainer\n      }, React.createElement(Text, null, \"Quiz result for deck: \", deck.title), React.createElement(Text, null, \"Total questions \", deck.questions.length), React.createElement(Card, {\n        wrapperStyle: {\n          alignItems: \"center\"\n        }\n      }, React.createElement(Text, {\n        h2: true\n      }, \"You scored\"), React.createElement(Text, {\n        h2: true\n      }, score, \" %\")), React.createElement(View, {\n        style: commonStyles.flashcardsButtonContainer\n      }, React.createElement(Button, {\n        onPress: function onPress() {\n          _this3.setState({\n            score: 0,\n            currentQuestionId: 0\n          });\n        },\n        title: \"Restart Quiz\",\n        icon: React.createElement(Icon, {\n          name: \"school\",\n          size: 15,\n          color: \"white\",\n          iconStyle: {\n            marginRight: 10\n          }\n        }),\n        buttonStyle: commonStyles.flashcardsButton\n      }), React.createElement(Button, {\n        onPress: function onPress() {\n          navigation.navigate(\"Deck\");\n        },\n        title: \"Back to Deck\",\n        icon: React.createElement(Icon, {\n          name: \"arrow-back\",\n          size: 15,\n          color: \"white\",\n          iconStyle: {\n            marginRight: 10\n          }\n        }),\n        buttonStyle: _objectSpread(_objectSpread({}, commonStyles.flashcardsButton), {}, {\n          backgroundColor: \"gray\"\n        })\n      })));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var deck = this.props.deck;\n\n      if (!deck) {\n        return React.createElement(View, null, React.createElement(Text, null, \"Loading...\"));\n      }\n\n      if (deck.questions.length === 0) {\n        return React.createElement(ScrollView, {\n          style: commonStyles.genericTextContainer\n        }, React.createElement(Text, {\n          h5: true\n        }, \"The number of questions for this deck is zero. Please add some cards then start the quiz.\"));\n      }\n\n      if (this.state.currentQuestionId === deck.questions.length) {\n        return this.quizResult();\n      }\n\n      return this.quiz();\n    }\n  }]);\n\n  return StartQuiz;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(decks, ownProps) {\n  var deckId = ownProps.navigation.state.params.deckId;\n  var deck = decks[deckId];\n  return {\n    deck: deck\n  };\n};\n\nexport default connect(mapStateToProps)(StartQuiz);","map":{"version":3,"sources":["/home/kinathan/Desktop/retribution/mobile-flashcards/components/Quiz.js"],"names":["React","Component","connect","clearLocalNotification","setLocalNotification","Button","Card","Icon","Text","commonStyles","default","Flashcard","StartQuiz","state","score","currentQuestionId","shouldShowQuestion","handleFlipCard","setState","previousState","handleResponse","isCorrect","deck","props","genericTextContainer","title","questions","length","flashcardsButtonContainer","flexDirection","backgroundColor","width","marginRight","navigation","Math","round","alignItems","flashcardsButton","navigate","quizResult","quiz","mapStateToProps","decks","ownProps","deckId","params"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { ScrollView, View } from \"react-native\";\nimport { connect } from \"react-redux\";\nimport { clearLocalNotification, setLocalNotification } from \"../utils/helper\";\nimport { Button, Card, Icon, Text } from \"react-native-elements\";\n\nimport { commonStyles } from \"../utils/styles\";\nimport { default as Flashcard } from \"./Card\";\n\nclass StartQuiz extends Component {\n  state = { score: 0, currentQuestionId: 0, shouldShowQuestion: true };\n\n  handleFlipCard = () => {\n    this.setState(previousState => {\n      return { shouldShowQuestion: !previousState.shouldShowQuestion };\n    });\n  };\n\n  handleResponse = async ({ isCorrect }) => {\n    if (isCorrect === true) {\n      this.setState(previousState => {\n        return { score: previousState.score + 1 };\n      });\n    }\n\n    // increment state.currentQuestionId\n    this.setState(previousState => {\n      return {\n        currentQuestionId: previousState.currentQuestionId + 1,\n        shouldShowQuestion: true\n      };\n    });\n\n    // user has completed at least one quiz for today\n    // therefore reset notification (no notification for today)\n    // and set new notification (new notification from tomorrow)\n    await clearLocalNotification();\n    setLocalNotification();\n  };\n\n  quiz() {\n    const { deck } = this.props;\n    const { currentQuestionId } = this.state;\n\n    return (\n      <ScrollView style={commonStyles.genericTextContainer}>\n        <Text>Quiz for deck: {deck.title}</Text>\n        <Text>\n          Question: {currentQuestionId + 1} of {deck.questions.length}\n        </Text>\n        <Card>\n          <Flashcard\n            card={deck.questions[currentQuestionId]}\n            shouldShowQuestion={this.state.shouldShowQuestion}\n            handleFlipCard={this.handleFlipCard}\n          />\n        </Card>\n        <View\n          style={{\n            ...commonStyles.flashcardsButtonContainer,\n            flexDirection: \"row\"\n          }}\n        >\n          <Button\n            onPress={() => {\n              this.handleResponse({ isCorrect: true });\n            }}\n            title=\"Correct\"\n            buttonStyle={{\n              backgroundColor: \"darkgreen\",\n              width: 120\n            }}\n            icon={\n              <Icon\n                name=\"check-circle\"\n                size={15}\n                color=\"white\"\n                iconStyle={{ marginRight: 5 }}\n              />\n            }\n          />\n          <View style={{ width: 20 }} />\n          <Button\n            onPress={() => {\n              this.handleResponse({ isCorrect: false });\n            }}\n            title=\"Incorrect\"\n            buttonStyle={{\n              backgroundColor: \"darkred\",\n              width: 120\n            }}\n            icon={\n              <Icon\n                name=\"cancel\"\n                size={15}\n                color=\"white\"\n                iconStyle={{ marginRight: 5 }}\n              />\n            }\n          />\n        </View>\n      </ScrollView>\n    );\n  }\n\n  quizResult() {\n    const { navigation, deck } = this.props;\n\n    let score = 0;\n    if (deck.questions.length !== 0) {\n      score =\n        Math.round((this.state.score / deck.questions.length) * 10000) / 100;\n    }\n\n    return (\n      <ScrollView style={commonStyles.genericTextContainer}>\n        <Text>Quiz result for deck: {deck.title}</Text>\n        <Text>Total questions {deck.questions.length}</Text>\n\n        <Card\n          wrapperStyle={{\n            // flex: 1,\n            alignItems: \"center\"\n          }}\n        >\n          <Text h2>You scored</Text>\n          <Text h2>{score} %</Text>\n        </Card>\n\n        <View style={commonStyles.flashcardsButtonContainer}>\n          <Button\n            onPress={() => {\n              this.setState({ score: 0, currentQuestionId: 0 });\n            }}\n            title=\"Restart Quiz\"\n            icon={\n              <Icon\n                name=\"school\"\n                size={15}\n                color=\"white\"\n                iconStyle={{ marginRight: 10 }}\n              />\n            }\n            buttonStyle={commonStyles.flashcardsButton}\n          />\n          <Button\n            onPress={() => {\n              navigation.navigate(\"Deck\");\n            }}\n            title=\"Back to Deck\"\n            icon={\n              <Icon\n                name=\"arrow-back\"\n                size={15}\n                color=\"white\"\n                iconStyle={{ marginRight: 10 }}\n              />\n            }\n            buttonStyle={{\n              ...commonStyles.flashcardsButton,\n              backgroundColor: \"gray\"\n            }}\n          />\n        </View>\n      </ScrollView>\n    );\n  }\n\n  render() {\n    const { deck } = this.props;\n\n    if (!deck) {\n      return (\n        <View>\n          <Text>Loading...</Text>\n        </View>\n      );\n    }\n\n    if (deck.questions.length === 0) {\n      return (\n        <ScrollView style={commonStyles.genericTextContainer}>\n          <Text h5>\n            The number of questions for this deck is zero. Please add some cards\n            then start the quiz.\n          </Text>\n        </ScrollView>\n      );\n    }\n\n    if (this.state.currentQuestionId === deck.questions.length) {\n      return this.quizResult();\n    }\n\n    return this.quiz();\n  }\n}\n\nconst mapStateToProps = (decks, ownProps) => {\n  const { deckId } = ownProps.navigation.state.params;\n  const deck = decks[deckId];\n  return { deck };\n};\n\nexport default connect(mapStateToProps)(StartQuiz);"]},"metadata":{},"sourceType":"module"}