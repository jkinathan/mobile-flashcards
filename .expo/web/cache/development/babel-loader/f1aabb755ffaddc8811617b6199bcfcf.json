{"ast":null,"code":"import React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Styles from \"../utilities/styles\";\nimport { useSelector } from \"react-redux\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { removeDeckAS } from \"../utilities/api\";\nimport { removeDeck } from \"../actions/action\";\nimport { useDispatch } from \"react-redux\";\nimport { useEffect } from \"react\";\n\nvar DeckDetail = function DeckDetail(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n  var dispatch = useDispatch();\n  var deck = route.params;\n  var specDeck = useSelector(function (state) {\n    return state;\n  });\n  var cards = 0;\n\n  if (route.params !== undefined) {\n    cards = deck.deck.questions.length;\n  }\n\n  var removeDDeck = function removeDDeck(id) {\n    removeDeckAS(id);\n    removeDeck(id);\n    console.log(\"Deleteddd........\", route.params);\n    navigation.goBack();\n  };\n\n  useEffect(function () {\n    navigation.setOptions({\n      title: deck.deck.title\n    });\n  }, [cards]);\n  return React.createElement(View, {\n    style: Styles.main\n  }, React.createElement(Text, {\n    style: Styles.header\n  }, deck.deck.title), React.createElement(Text, {\n    style: Styles.cards\n  }, cards === 1 ? cards + \" Card\" : cards === 0 ? \"No card\" : cards + \" cards\"), React.createElement(View, {\n    style: Styles.deckOptions\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return navigation.navigate(\"AddCard\", {\n        deck: route.params\n      });\n    }\n  }, React.createElement(Text, {\n    style: Styles.button\n  }, \"Add Card\")), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return navigation.navigate(\"StartQuiz\", {\n        deck: route.params\n      });\n    }\n  }, React.createElement(Text, {\n    style: Styles.button\n  }, \"Start Quiz\")), React.createElement(TouchableOpacity, {\n    onPress: removeDDeck\n  }, React.createElement(Text, {\n    style: Styles.delete\n  }, \"Delete Deck\"))));\n};\n\nexport default DeckDetail;","map":{"version":3,"sources":["/home/kinathan/Desktop/retribution/mobile-flashcards/components/DeckDetail.js"],"names":["React","Styles","useSelector","removeDeckAS","removeDeck","useDispatch","useEffect","DeckDetail","route","navigation","dispatch","deck","params","specDeck","state","cards","undefined","questions","length","removeDDeck","id","console","log","goBack","setOptions","title","main","header","deckOptions","navigate","button","delete"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,OAAOC,MAAP;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAEA,SAASC,YAAT;AACA,SAASC,UAAT;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,SAAT,QAA0B,OAA1B;;AAGA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAA2B;AAAA,MAAxBC,KAAwB,QAAxBA,KAAwB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;AAC5C,MAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACA,MAAMM,IAAI,GAAGH,KAAK,CAACI,MAAnB;AACA,MAAMC,QAAQ,GAAGX,WAAW,CAAC,UAACY,KAAD;AAAA,WAAWA,KAAX;AAAA,GAAD,CAA5B;AAGA,MAAIC,KAAK,GAAG,CAAZ;;AAEA,MAAIP,KAAK,CAACI,MAAN,KAAiBI,SAArB,EAAgC;AAC9BD,IAAAA,KAAK,GAAGJ,IAAI,CAACA,IAAL,CAAUM,SAAV,CAAoBC,MAA5B;AACD;;AAED,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,EAAD,EAAQ;AAC1BjB,IAAAA,YAAY,CAACiB,EAAD,CAAZ;AACAhB,IAAAA,UAAU,CAACgB,EAAD,CAAV;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAgCd,KAAK,CAACI,MAAtC;AACAH,IAAAA,UAAU,CAACc,MAAX;AACD,GALD;;AAOAjB,EAAAA,SAAS,CAAC,YAAM;AAEdG,IAAAA,UAAU,CAACe,UAAX,CAAsB;AAAEC,MAAAA,KAAK,EAAEd,IAAI,CAACA,IAAL,CAAUc;AAAnB,KAAtB;AAED,GAJQ,EAIN,CAACV,KAAD,CAJM,CAAT;AAMA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEd,MAAM,CAACyB;AAApB,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEzB,MAAM,CAAC0B;AAApB,KAA6BhB,IAAI,CAACA,IAAL,CAAUc,KAAvC,CADF,EAEE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAExB,MAAM,CAACc;AAApB,KACGA,KAAK,KAAK,CAAV,GACGA,KAAK,GAAG,OADX,GAEGA,KAAK,KAAK,CAAV,GACA,SADA,GAEAA,KAAK,GAAG,QALd,CAFF,EAUE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEd,MAAM,CAAC2B;AAApB,KACE,oBAAC,gBAAD;AACE,IAAA,OAAO,EAAE;AAAA,aAAMnB,UAAU,CAACoB,QAAX,CAAoB,SAApB,EAA+B;AAAElB,QAAAA,IAAI,EAAEH,KAAK,CAACI;AAAd,OAA/B,CAAN;AAAA;AADX,KAGE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEX,MAAM,CAAC6B;AAApB,gBAHF,CADF,EAME,oBAAC,gBAAD;AACE,IAAA,OAAO,EAAE;AAAA,aAAMrB,UAAU,CAACoB,QAAX,CAAoB,WAApB,EAAiC;AAAElB,QAAAA,IAAI,EAAEH,KAAK,CAACI;AAAd,OAAjC,CAAN;AAAA;AADX,KAGE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEX,MAAM,CAAC6B;AAApB,kBAHF,CANF,EAWE,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAEX;AAA3B,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAElB,MAAM,CAAC8B;AAApB,mBADF,CAXF,CAVF,CADF;AA4BD,CArDD;;AAuDA,eAAexB,UAAf","sourcesContent":["import React from \"react\";\nimport { View, Text } from \"react-native\";\nimport Styles from \"../utilities/styles\";\nimport { useSelector } from \"react-redux\";\nimport { TouchableOpacity } from \"react-native\";\nimport { removeDeckAS } from \"../utilities/api\";\nimport { removeDeck } from \"../actions/action\";\nimport { useDispatch } from \"react-redux\";\nimport { useEffect } from \"react\";\n\n\nconst DeckDetail = ({ route, navigation }) => {\n  const dispatch = useDispatch();\n  const deck = route.params;\n  const specDeck = useSelector((state) => state);\n\n  // console.log(\"My state is here:\",route.params.deck.questions.length)\n  let cards = 0;\n  \n  if (route.params !== undefined) {\n    cards = deck.deck.questions.length;\n  }\n  \n  const removeDDeck = (id) => {\n    removeDeckAS(id);\n    removeDeck(id);\n    console.log(\"Deleteddd........\",route.params)\n    navigation.goBack();\n  };\n  \n  useEffect(() => {\n    \n    navigation.setOptions({ title: deck.deck.title });\n\n  }, [cards]);\n\n  return (\n    <View style={Styles.main}>\n      <Text style={Styles.header}>{deck.deck.title}</Text>\n      <Text style={Styles.cards}>\n        {cards === 1\n          ? cards + \" Card\"\n          : cards === 0\n          ? \"No card\"\n          : cards + \" cards\"}\n      </Text>\n\n      <View style={Styles.deckOptions}>\n        <TouchableOpacity\n          onPress={() => navigation.navigate(\"AddCard\", { deck: route.params })}\n        >\n          <Text style={Styles.button}>Add Card</Text>\n        </TouchableOpacity>\n        <TouchableOpacity\n          onPress={() => navigation.navigate(\"StartQuiz\", { deck: route.params })}\n        >\n          <Text style={Styles.button}>Start Quiz</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={removeDDeck}>\n          <Text style={Styles.delete}>Delete Deck</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\n\nexport default DeckDetail;\n// export class DeckDetail extends Component {\n  \n\n//   shouldComponentUpdate(nextProps) {\n//     return nextProps.deck !== undefined;\n//   }\n//   handleDelete = id => {\n//     const { removeDeck, navigation } = this.props;\n\n//     removeDeck(id);\n//     removeDeckAS(id);\n\n//     navigation.goBack();\n//   };\n//   render() {\n//     const { deck } = this.props;\n\n//     return (\n//       <View style={styles.container}>\n//         <Deck id={deck.title} />\n//         <View>\n//           <TouchButton\n//             btnStyle={{ backgroundColor: white, borderColor: textGray }}\n//             txtStyle={{ color: textGray }}\n//             onPress={() =>\n//               this.props.navigation.navigate('AddCard', { title: deck.title })\n//             }\n//           >\n//             Add Card\n//           </TouchButton>\n//           <TouchButton\n//             btnStyle={{ backgroundColor: green, borderColor: white }}\n//             txtStyle={{ color: white }}\n//             onPress={() =>\n//               this.props.navigation.navigate('Quiz', { title: deck.title })\n//             }\n//           >\n//             Start Quiz\n//           </TouchButton>\n//         </View>\n//         <TextButton\n//           txtStyle={{ color: red }}\n//           onPress={() => this.handleDelete(deck.title)}\n//         >\n//           Delete Deck\n//         </TextButton>\n//       </View>\n//     );\n//   }\n// }\n\n// const styles = StyleSheet.create({\n//   container: {\n//     flex: 1,\n//     justifyContent: 'space-around',\n//     paddingTop: 16,\n//     paddingLeft: 16,\n//     paddingRight: 16,\n//     paddingBottom: 16,\n//     backgroundColor: gray\n//   }\n// });\n\n// const mapStateToProps = (state,props) => {\n//   // const title = navigation.route.params.title\n//   // navigation.getParam('title', 'undefined');\n//   // this.props.route.params\n//   const deck = state[this.props.navigation.title];\n\n//   return {\n//     deck\n//   };\n// };\n\n// export default connect(mapStateToProps,{ removeDeck })(DeckDetail);"]},"metadata":{},"sourceType":"module"}