{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchButton from \"./TouchButton\";\nimport { gray, green } from \"../utilities/colors\";\nimport { connect } from 'react-redux';\nimport { addCardToDeck } from \"../actions/action\";\nimport { addCardToDeckAS } from \"../utilities/api\";\nexport var AddCard = function (_Component) {\n  _inherits(AddCard, _Component);\n\n  var _super = _createSuper(AddCard);\n\n  function AddCard() {\n    var _this;\n\n    _classCallCheck(this, AddCard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      question: '',\n      answer: ''\n    };\n\n    _this.handleQuestionChange = function (question) {\n      _this.setState({\n        question: question\n      });\n    };\n\n    _this.handleAnswerChange = function (answer) {\n      _this.setState({\n        answer: answer\n      });\n    };\n\n    _this.handleSubmit = function () {\n      var _this$props = _this.props,\n          addCardToDeck = _this$props.addCardToDeck,\n          title = _this$props.title,\n          navigation = _this$props.navigation;\n      var card = {\n        question: _this.state.question,\n        answer: _this.state.answer\n      };\n      addCardToDeck(title, card);\n      addCardToDeckAS(title, card);\n\n      _this.setState({\n        question: '',\n        answer: ''\n      });\n\n      navigation.goBack();\n    };\n\n    return _this;\n  }\n\n  _createClass(AddCard, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: styles.container\n      }, React.createElement(View, null, React.createElement(View, {\n        style: styles.block\n      }, React.createElement(Text, {\n        style: styles.title\n      }, \"Add a question\")), React.createElement(View, {\n        style: [styles.block]\n      }, React.createElement(TextInput, {\n        style: styles.input,\n        value: this.state.question,\n        onChangeText: this.handleQuestionChange,\n        placeholder: \"Question\",\n        autoFocus: true,\n        returnKeyType: \"next\",\n        onSubmitEditing: function onSubmitEditing() {\n          return _this2.answerTextInput.focus();\n        },\n        blurOnSubmit: false\n      })), React.createElement(View, {\n        style: [styles.block]\n      }, React.createElement(TextInput, {\n        style: styles.input,\n        value: this.state.answer,\n        onChangeText: this.handleAnswerChange,\n        placeholder: \"Answer\",\n        ref: function ref(input) {\n          _this2.answerTextInput = input;\n        },\n        returnKeyType: \"done\",\n        onSubmitEditing: this.handleSubmit\n      })), React.createElement(TouchButton, {\n        btnStyle: {\n          backgroundColor: green,\n          borderColor: '#fff'\n        },\n        onPress: this.handleSubmit,\n        disabled: this.state.question === '' || this.state.answer === ''\n      }, \"Submit\")), React.createElement(View, {\n        style: {\n          height: '30%'\n        }\n      }));\n    }\n  }]);\n\n  return AddCard;\n}(Component);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 16,\n    paddingLeft: 16,\n    paddingRight: 16,\n    paddingBottom: 16,\n    backgroundColor: gray,\n    justifyContent: 'space-around'\n  },\n  block: {\n    marginBottom: 20\n  },\n  title: {\n    textAlign: 'center',\n    fontSize: 32\n  },\n  input: {\n    borderWidth: 1,\n    borderColor: 'gray',\n    backgroundColor: '#fff',\n    paddingLeft: 10,\n    paddingRight: 10,\n    borderRadius: 5,\n    fontSize: 20,\n    height: 40\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state, _ref) {\n  var navigation = _ref.navigation;\n  var title = navigation.getParam('title', 'undefined');\n  return {\n    title: title\n  };\n};\n\nexport default connect(mapStateToProps, {\n  addCardToDeck: addCardToDeck\n})(AddCard);","map":{"version":3,"sources":["/home/kinathan/Desktop/retribution/mobile-flashcards/components/AddCard.js"],"names":["React","Component","TouchButton","gray","green","connect","addCardToDeck","addCardToDeckAS","AddCard","state","question","answer","handleQuestionChange","setState","handleAnswerChange","handleSubmit","props","title","navigation","card","goBack","styles","container","block","input","answerTextInput","focus","backgroundColor","borderColor","height","StyleSheet","create","flex","paddingTop","paddingLeft","paddingRight","paddingBottom","justifyContent","marginBottom","textAlign","fontSize","borderWidth","borderRadius","mapStateToProps","getParam"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Text, View, TextInput, StyleSheet } from 'react-native';\nimport TouchButton from './TouchButton';\nimport { gray, green } from '../utilities/colors';\nimport { connect } from 'react-redux';\nimport { addCardToDeck } from '../actions/action';\nimport { addCardToDeckAS } from '../utilities/api';\n\nexport class AddCard extends Component {\n  \n  state = {\n    question: '',\n    answer: ''\n  };\n\n  handleQuestionChange = question => {\n    this.setState({ question });\n  };\n\n  handleAnswerChange = answer => {\n    this.setState({ answer });\n  };\n\n  handleSubmit = () => {\n\n    const { addCardToDeck, title, navigation } = this.props;\n    const card = {\n      question: this.state.question,\n      answer: this.state.answer\n    };\n\n    addCardToDeck(title, card);\n    addCardToDeckAS(title, card);\n\n    this.setState({ question: '', answer: '' });\n    navigation.goBack();\n  };\n  render() {\n    return (\n      <View style={styles.container}>\n        <View>\n          <View style={styles.block}>\n            <Text style={styles.title}>Add a question</Text>\n          </View>\n          <View style={[styles.block]}>\n            <TextInput\n              style={styles.input}\n              value={this.state.question}\n              onChangeText={this.handleQuestionChange}\n              placeholder=\"Question\"\n              autoFocus={true}\n              returnKeyType=\"next\"\n              onSubmitEditing={() => this.answerTextInput.focus()}\n              blurOnSubmit={false}\n            />\n          </View>\n          <View style={[styles.block]}>\n            <TextInput\n              style={styles.input}\n              value={this.state.answer}\n              onChangeText={this.handleAnswerChange}\n              placeholder=\"Answer\"\n              ref={input => {\n                this.answerTextInput = input;\n              }}\n              returnKeyType=\"done\"\n              onSubmitEditing={this.handleSubmit}\n            />\n          </View>\n          <TouchButton\n            btnStyle={{ backgroundColor: green, borderColor: '#fff' }}\n            onPress={this.handleSubmit}\n            disabled={this.state.question === '' || this.state.answer === ''}\n          >\n            Submit\n          </TouchButton>\n        </View>\n        <View style={{ height: '30%' }} />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 16,\n    paddingLeft: 16,\n    paddingRight: 16,\n    paddingBottom: 16,\n    backgroundColor: gray,\n    justifyContent: 'space-around'\n  },\n  block: {\n    marginBottom: 20\n  },\n  title: {\n    textAlign: 'center',\n    fontSize: 32\n  },\n  input: {\n    borderWidth: 1,\n    borderColor: 'gray',\n    backgroundColor: '#fff',\n    paddingLeft: 10,\n    paddingRight: 10,\n    borderRadius: 5,\n    fontSize: 20,\n    height: 40\n  }\n});\n\nconst mapStateToProps = (state, { navigation }) => {\n  const title = navigation.getParam('title', 'undefined');\n\n  return {\n    title\n  };\n};\n\nexport default connect(mapStateToProps,{ addCardToDeck })(AddCard);"]},"metadata":{},"sourceType":"module"}