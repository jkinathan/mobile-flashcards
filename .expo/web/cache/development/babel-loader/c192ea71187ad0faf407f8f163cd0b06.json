{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport { getDeck } from \"../utilities/api\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { getDeck2 } from \"../utilities/api\";\n\nvar StartQuiz = function (_React$Component) {\n  _inherits(StartQuiz, _React$Component);\n\n  var _super = _createSuper(StartQuiz);\n\n  function StartQuiz(props) {\n    var _this;\n\n    _classCallCheck(this, StartQuiz);\n\n    _this = _super.call(this, props);\n\n    _this.flipCard = function () {\n      _this.setState(function (prevState) {\n        return {\n          showQuestion: !prevState.showQuestion,\n          correct: prevState.correct,\n          indexAt: prevState.indexAt,\n          questions: prevState.questions\n        };\n      });\n    };\n\n    _this.shuffleQuestions = function (array) {\n      for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n      }\n    };\n\n    _this.markAsCorrect = function () {\n      _this.setState(function (prevState) {\n        return {\n          correct: prevState.correct + 1,\n          indexAt: prevState.indexAt + 1,\n          questions: prevState.questions,\n          showQuestion: true\n        };\n      });\n    };\n\n    _this.progressOneQuestion = function () {\n      _this.setState(function (prevState) {\n        return {\n          indexAt: prevState.indexAt + 1,\n          showQuestion: true,\n          correct: prevState.correct,\n          questions: prevState.questions\n        };\n      });\n    };\n\n    _this.state = {\n      questions: null,\n      correct: 0,\n      indexAt: 0,\n      showQuestion: true\n    };\n    return _this;\n  }\n\n  _createClass(StartQuiz, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          route = _this$props.route,\n          navigation = _this$props.navigation;\n      console.log(\"Mounting....\", route.params.deck.title);\n      var deckID = route.params.deck.title;\n      getDeck(deckID).then(function (deckk) {\n        console.log(\"Get Deck\", deckk);\n\n        _this2.shuffleQuestions(deckk.questions);\n\n        _this2.setState({\n          questions: questions\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      if (this.state.questions === null || this.state.questions === undefined) {\n        return null;\n      } else if (this.state.questions.length === 0) {\n        return React.createElement(View, null, React.createElement(Text, null, \"There is no question in this deck :(\"));\n      } else if (this.state.questions.length !== this.state.indexAt) {\n        var question = this.state.questions[this.state.indexAt];\n        return React.createElement(View, null, React.createElement(Text, null, \"Your Progress \", this.state.indexAt + 1, \" of \", this.state.questions.length), React.createElement(Text, null, this.state.showQuestion ? question.question : question.answer), React.createElement(Button, {\n          title: this.state.showQuestion ? 'Show Answer' : 'Show Question',\n          onPress: this.flipCard\n        }), React.createElement(Button, {\n          title: 'Correct',\n          onPress: this.markAsCorrect\n        }), React.createElement(Button, {\n          title: 'Incorrect',\n          onPress: this.progressOneQuestion\n        }));\n      } else {\n        return React.createElement(View, null, React.createElement(Text, null, \"That's the end of this deck!\"), React.createElement(Text, null, \"Score: You have answered \", Math.round(this.state.correct / this.state.questions.length * 100), \"% Correct!\"), React.createElement(Button, {\n          title: 'Restart Quiz',\n          onPress: function onPress() {\n            _this3.shuffleQuestions(_this3.state.questions);\n\n            _this3.setState({\n              correct: 0,\n              indexAt: 0,\n              showQuestion: true\n            });\n          }\n        }), React.createElement(Button, {\n          title: 'Back to Deck',\n          onPress: function onPress() {\n            _this3.props.navigation.navigate('DeckOverview', {\n              deckID: _this3.props.navigation.getParam('deckID', '')\n            });\n          }\n        }));\n      }\n    }\n  }]);\n\n  return StartQuiz;\n}(React.Component);\n\nexport { StartQuiz as default };","map":{"version":3,"sources":["/home/kinathan/Desktop/retribution/mobile-flashcards/components/Quiz.js"],"names":["React","getDeck","getDeck2","StartQuiz","props","flipCard","setState","prevState","showQuestion","correct","indexAt","questions","shuffleQuestions","array","i","length","j","Math","floor","random","temp","markAsCorrect","progressOneQuestion","state","route","navigation","console","log","params","deck","title","deckID","then","deckk","undefined","question","answer","round","navigate","getParam","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { getDeck } from \"../utilities/api\";\nimport {Button, Text, View} from \"react-native\";\nimport { getDeck2 } from \"../utilities/api\";\n\nexport default class StartQuiz extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            questions: null,\n            correct: 0,\n            indexAt: 0,\n            showQuestion: true,\n        }\n    }\n\n    componentDidMount() {\n        const { route, navigation } = this.props;\n        console.log(\"Mounting....\",route.params.deck.title)\n        const deckID = route.params.deck.title;\n        \n        getDeck(deckID).then((deckk) => {\n          console.log(\"Get Deck\",deckk);\n                // const questions = JSON.parse(deckk).questions;\n                // JSON.parse(storeResults)[title]\n                this.shuffleQuestions(deckk.questions);\n                this.setState({questions: questions});\n            }\n        );\n    }\n\n    render() {\n        if(this.state.questions === null || this.state.questions === undefined) {\n            return null;\n        } else if(this.state.questions.length === 0) {\n            return (<View><Text>There is no question in this deck :(</Text></View>);\n        } else if (this.state.questions.length !== this.state.indexAt) {\n            const question = this.state.questions[this.state.indexAt];\n            return (\n                <View>\n                    <Text>\n                        Your Progress {this.state.indexAt+1} of {this.state.questions.length}\n                    </Text>\n                    <Text>\n                        {this.state.showQuestion ? question.question : question.answer}\n                    </Text>\n                    <Button\n                        title={this.state.showQuestion ? 'Show Answer' : 'Show Question'}\n                        onPress={this.flipCard}\n                    />\n                    <Button\n                        title={'Correct'}\n                        onPress={this.markAsCorrect}\n                    />\n                    <Button\n                        title={'Incorrect'}\n                        onPress={this.progressOneQuestion}\n                    />\n                </View>\n            )\n        } else {\n            return (\n                <View>\n                    <Text>\n                        That's the end of this deck!\n                    </Text>\n                    <Text>\n                        Score: You have answered {Math.round(((this.state.correct)/this.state.questions.length)*100)}% Correct!\n                    </Text>\n                    <Button\n                        title={'Restart Quiz'}\n                        onPress={() => {\n                            this.shuffleQuestions(this.state.questions);\n                            this.setState({\n                                correct: 0,\n                                indexAt: 0,\n                                showQuestion: true,\n                            });\n                        }}\n                    />\n                    <Button\n                        title={'Back to Deck'}\n                        onPress={() => {\n                            this.props.navigation.navigate('DeckOverview', {\n                                deckID: this.props.navigation.getParam('deckID', ''),\n                            });\n                        }}\n                    />\n                </View>\n            );\n        }\n    }\n\n    flipCard = () => {\n        this.setState(prevState => ({\n            showQuestion: !prevState.showQuestion,\n            correct: prevState.correct,\n            indexAt: prevState.indexAt,\n            questions: prevState.questions,\n        }));\n    }\n\n    shuffleQuestions = (array) => {\n        for (let i = array.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            let temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n    }\n\n    markAsCorrect = () => {\n        this.setState(prevState => ({\n            correct: prevState.correct+1,\n            indexAt: prevState.indexAt+1,\n            questions: prevState.questions,\n            showQuestion: true,\n        }));\n    }\n\n    progressOneQuestion = () => {\n        this.setState(prevState => ({\n            indexAt: prevState.indexAt+1,\n            showQuestion: true,\n            correct: prevState.correct,\n            questions: prevState.questions,\n        }));\n    }\n}"]},"metadata":{},"sourceType":"module"}