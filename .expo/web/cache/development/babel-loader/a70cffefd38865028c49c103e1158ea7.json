{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchButton from \"./TouchButton\";\nimport { gray, green, white, textGray, blue } from \"../utilities/colors\";\nimport { connect } from 'react-redux';\nimport { addDeck } from \"../actions/action\";\nimport { saveDeckTitleAS } from \"../utilities/api\";\nimport { StackActions, NavigationActions } from 'react-navigation';\nexport var AddDeck = function (_Component) {\n  _inherits(AddDeck, _Component);\n\n  var _super = _createSuper(AddDeck);\n\n  function AddDeck() {\n    var _this;\n\n    _classCallCheck(this, AddDeck);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      title: \"\"\n    };\n\n    _this.handleChange = function (title) {\n      _this.setState({\n        title: title\n      });\n    };\n\n    _this.handleSubmit = function () {\n      var _this$props = _this.props,\n          addDeck = _this$props.addDeck,\n          navigation = _this$props.navigation;\n      addDeck(_this.state.title);\n      saveDeckTitleAS(_this.state.title);\n      var resetAction = StackActions.reset({\n        index: 1,\n        actions: [NavigationActions.navigate({\n          routeName: 'DeckList'\n        }), NavigationActions.navigate({\n          routeName: 'DeckDetail',\n          params: {\n            title: _this.state.title\n          }\n        })]\n      });\n      navigation.dispatch(resetAction);\n\n      _this.setState(function () {\n        return {\n          text: ''\n        };\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(AddDeck, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: styles.container\n      }, React.createElement(View, {\n        style: {\n          height: 60\n        }\n      }), React.createElement(View, {\n        style: styles.block\n      }, React.createElement(Text, {\n        style: styles.title\n      }, \"What is the title of your new deck?\")), React.createElement(View, {\n        style: [styles.block]\n      }, React.createElement(TextInput, {\n        style: styles.input,\n        value: this.state.title,\n        onChangeText: this.handleChange,\n        placeholder: \"Deck Name\",\n        autoFocus: true,\n        returnKeyType: \"done\",\n        onSubmitEditing: this.handleSubmit\n      })), React.createElement(TouchButton, {\n        btnStyle: {\n          backgroundColor: green,\n          borderColor: white\n        },\n        onPress: this.handleSubmit,\n        disabled: this.state.text === ''\n      }, \"Create Deck\"));\n    }\n  }]);\n\n  return AddDeck;\n}(Component);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 16,\n    paddingLeft: 16,\n    paddingRight: 16,\n    paddingBottom: 16,\n    backgroundColor: blue\n  },\n  block: {\n    marginBottom: 20\n  },\n  title: {\n    textAlign: 'center',\n    fontSize: 32\n  },\n  input: {\n    borderWidth: 1,\n    borderColor: textGray,\n    backgroundColor: white,\n    paddingLeft: 10,\n    paddingRight: 10,\n    borderRadius: 5,\n    fontSize: 20,\n    height: 40,\n    marginBottom: 20\n  }\n});\nexport default connect(null, {\n  addDeck: addDeck\n})(AddDeck);","map":{"version":3,"sources":["/home/kinathan/Desktop/retribution/mobile-flashcards/components/AddDeck.js"],"names":["React","Component","TouchButton","gray","green","white","textGray","blue","connect","addDeck","saveDeckTitleAS","StackActions","NavigationActions","AddDeck","state","title","handleChange","setState","handleSubmit","props","navigation","resetAction","reset","index","actions","navigate","routeName","params","dispatch","text","styles","container","height","block","input","backgroundColor","borderColor","StyleSheet","create","flex","paddingTop","paddingLeft","paddingRight","paddingBottom","marginBottom","textAlign","fontSize","borderWidth","borderRadius"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Text, View, StyleSheet, TextInput } from 'react-native';\nimport TouchButton from './TouchButton';\nimport { gray, green, white, textGray, blue } from '../utilities/colors';\nimport { connect } from 'react-redux';\nimport { addDeck } from '../actions/action';\nimport { saveDeckTitleAS } from '../utilities/api';\nimport { StackActions, NavigationActions } from 'react-navigation';\n\nexport class AddDeck extends Component {\n  \n  state = {\n    title: \"\"\n  };\n\n  handleChange = (title) => {\n    this.setState({ title });\n  };\n\n  handleSubmit = () => {\n    const { addDeck, navigation } = this.props;\n  \n\n    addDeck(this.state.title);\n    saveDeckTitleAS(this.state.title);\n\n    const resetAction = StackActions.reset({\n      index: 1,\n      actions: [\n        NavigationActions.navigate({ routeName: 'DeckList' }),\n        NavigationActions.navigate({\n          routeName: 'DeckDetail',\n          params: { title: this.state.title }\n        })\n      ]\n    });\n    navigation.dispatch(resetAction);\n\n    this.setState(() => ({ text: '' }));\n  };\n  render() {\n    return (\n      <View style={styles.container}>\n        <View style={{ height: 60 }} />\n        <View style={styles.block}>\n          <Text style={styles.title}>What is the title of your new deck?</Text>\n        </View>\n        <View style={[styles.block]}>\n          <TextInput\n            style={styles.input}\n            value={this.state.title}\n            onChangeText={this.handleChange}\n            placeholder=\"Deck Name\"\n            autoFocus={true}\n            returnKeyType=\"done\"\n            onSubmitEditing={this.handleSubmit}\n          />\n        </View>\n        <TouchButton\n          btnStyle={{ backgroundColor: green, borderColor: white }}\n          onPress={this.handleSubmit}\n          disabled={this.state.text === ''}\n        >\n          Create Deck\n        </TouchButton>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 16,\n    paddingLeft: 16,\n    paddingRight: 16,\n    paddingBottom: 16,\n    backgroundColor: blue\n  },\n  block: {\n    marginBottom: 20\n  },\n  title: {\n    textAlign: 'center',\n    fontSize: 32\n  },\n  input: {\n    borderWidth: 1,\n    borderColor: textGray,\n    backgroundColor: white,\n    paddingLeft: 10,\n    paddingRight: 10,\n    borderRadius: 5,\n    fontSize: 20,\n    height: 40,\n    marginBottom: 20\n  }\n});\n\nexport default connect(null,{ addDeck })(AddDeck);"]},"metadata":{},"sourceType":"module"}