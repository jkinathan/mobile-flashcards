{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Styles from \"../utilities/styles\";\nimport { AnswerQuestion, ANSWER_KEY, ClearAnswer } from \"../utilities/api\";\nimport { useState, useEffect } from \"react\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { setLocalNotification, clearLocalNotification } from \"../utilities/\";\n\nvar StartQuiz = function StartQuiz(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      displayResult = _useState2[0],\n      setDisplayResult = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      fromDb = _useState4[0],\n      setFromDb = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      index = _useState6[0],\n      setIndex = _useState6[1];\n\n  var deck = route.params.deck.deck;\n  var QuestionList = deck.questions;\n\n  var _useState7 = useState(true),\n      _useState8 = _slicedToArray(_useState7, 2),\n      displayQuestion = _useState8[0],\n      setDisplayQuestion = _useState8[1];\n\n  useEffect(function () {\n    AsyncStorage.getItem(ANSWER_KEY).then(function (s) {\n      console.log(s);\n      var data = JSON.parse(s);\n\n      if (data !== null) {\n        var returnVal = Object.keys(data).filter(function (s) {\n          return s.split(\" \")[0] === deck.title;\n        }).map(function (s) {\n          return data[s];\n        });\n        setFromDb(Object.values(returnVal));\n\n        if (Object.keys(returnVal).length === QuestionList.length) {\n          setDisplayResult(true);\n        } else if (Object.keys(returnVal).length > 0) {\n          setIndex(Object.keys(returnVal).length);\n        }\n      }\n    }).then(function () {});\n  }, []);\n  var selectedQuestion;\n\n  if (QuestionList.length !== 0) {\n    selectedQuestion = QuestionList[index];\n  }\n\n  var handleReset = function handleReset() {\n    ClearAnswer(deck.title);\n    setDisplayResult(false);\n    setFromDb([]);\n    setIndex(0);\n  };\n\n  var handleAnswer = function handleAnswer(text) {\n    AnswerQuestion({\n      deck: deck.title,\n      question: selectedQuestion.question,\n      passed: text\n    });\n    var data = fromDb;\n\n    if (data) {\n      data.push(text);\n      setFromDb(data);\n    }\n\n    if (index + 1 === QuestionList.length) {\n      setDisplayResult(true);\n      clearLocalNotification();\n      setLocalNotification();\n    } else {\n      setIndex(index + 1);\n    }\n  };\n\n  return React.createElement(View, {\n    style: Styles.main\n  }, QuestionList.length === 0 ? React.createElement(View, {\n    style: Styles.VerticalAlignCenter\n  }, React.createElement(Text, {\n    style: Styles.deckTexts\n  }, \"Sorry You can not take a quiz, because there are no cards in the deck\")) : displayResult ? React.createElement(View, {\n    style: {\n      flex: 1\n    }\n  }, React.createElement(View, {\n    style: Styles.VerticalAlignCenter\n  }, React.createElement(Text, {\n    style: Styles.deckTexts\n  }, \"passed\", \" \" + JSON.stringify(fromDb.filter(function (s) {\n    return s === true;\n  }).length), \"/\", JSON.stringify(fromDb.length)), React.createElement(View, {\n    style: {\n      marginTop: 50\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: handleReset\n  }, React.createElement(Text, {\n    style: Styles.button\n  }, \"Restart Quiz\")), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return navigation.navigate(\"Deck\", {\n        deck: deck.title\n      });\n    }\n  }, React.createElement(Text, {\n    style: [Styles.button, {\n      color: \"gray\",\n      borderColor: \"gray\"\n    }]\n  }, \"Back to Deck\"))))) : React.createElement(View, {\n    style: {\n      flex: 1\n    }\n  }, React.createElement(Text, null, index + 1, \"/\", QuestionList.length), React.createElement(View, {\n    style: Styles.VerticalAlignCenter\n  }, displayQuestion ? React.createElement(Text, {\n    style: Styles.deckTexts\n  }, selectedQuestion.question) : React.createElement(Text, {\n    style: Styles.deckTexts\n  }, selectedQuestion.answer), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return setDisplayQuestion(!displayQuestion);\n    }\n  }, displayQuestion ? React.createElement(Text, {\n    style: Styles.subButton\n  }, \"Answer\") : React.createElement(Text, {\n    style: Styles.subButton\n  }, \"question\"))), React.createElement(View, {\n    style: {\n      marginBottom: 50\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return handleAnswer(true);\n    }\n  }, React.createElement(Text, {\n    style: Styles.button\n  }, \"Correct\")), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return handleAnswer(false);\n    }\n  }, React.createElement(Text, {\n    style: [Styles.button, {\n      color: \"red\",\n      borderColor: \"red\"\n    }]\n  }, \"Incorrect\")))));\n};\n\nexport default StartQuiz;","map":{"version":3,"sources":["/home/kinathan/Desktop/retribution/mobile-flashcards/components/Quiz.js"],"names":["React","Styles","AnswerQuestion","ANSWER_KEY","ClearAnswer","useState","useEffect","TouchableOpacity","AsyncStorage","setLocalNotification","clearLocalNotification","StartQuiz","route","navigation","displayResult","setDisplayResult","fromDb","setFromDb","index","setIndex","deck","params","QuestionList","questions","displayQuestion","setDisplayQuestion","getItem","then","s","console","log","data","JSON","parse","returnVal","Object","keys","filter","split","title","map","values","length","selectedQuestion","handleReset","handleAnswer","text","question","passed","push","main","VerticalAlignCenter","deckTexts","flex","stringify","marginTop","button","navigate","color","borderColor","answer","subButton","marginBottom"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { View, Text } from \"react-native\";\nimport Styles from \"../utilities/styles\";\nimport { AnswerQuestion, ANSWER_KEY, ClearAnswer } from \"../utilities/api\";\nimport { useState, useEffect } from \"react\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { setLocalNotification,clearLocalNotification } from \"../utilities/\";\n\n\nconst StartQuiz = ({ route, navigation }) => {\n  const [displayResult, setDisplayResult] = useState(false);\n  const [fromDb, setFromDb] = useState(null);\n  const [index, setIndex] = useState(0);\n  const { deck } = route.params.deck;\n  const QuestionList = deck.questions;\n  const [displayQuestion, setDisplayQuestion] = useState(true);\n\n  useEffect(() => {\n    AsyncStorage.getItem(ANSWER_KEY)\n      .then((s) => {\n        console.log(s);\n        const data = JSON.parse(s);\n        if (data !== null) {\n          const returnVal = Object.keys(data)\n            .filter((s) => s.split(\" \")[0] === deck.title)\n            .map((s) => data[s]);\n          setFromDb(Object.values(returnVal));\n          if (Object.keys(returnVal).length === QuestionList.length) {\n            setDisplayResult(true);\n          } else if (Object.keys(returnVal).length > 0) {\n            setIndex(Object.keys(returnVal).length);\n          }\n        }\n      })\n      .then(() => {});\n  }, []);\n\n  let selectedQuestion;\n  if (QuestionList.length !== 0) {\n    selectedQuestion = QuestionList[index];\n  }\n  const handleReset=()=>{\n    ClearAnswer(deck.title)\n    setDisplayResult(false)\n    setFromDb([])\n    setIndex(0)\n  }\n\n  const handleAnswer = (text) => {\n    AnswerQuestion({\n      deck: deck.title,\n      question: selectedQuestion.question,\n      passed: text,\n    });\n\n    const data = fromDb;\n    if (data) {\n      data.push(text);\n      setFromDb(data);\n    }\n    if (index + 1 === QuestionList.length) {\n      setDisplayResult(true);\n      clearLocalNotification()\n      setLocalNotification()\n    } else {\n      setIndex(index + 1);\n    }\n  };\n\n  return (\n    <View style={Styles.main}>\n      {QuestionList.length === 0 ? (\n        <View style={Styles.VerticalAlignCenter}>\n          <Text style={Styles.deckTexts}>\n            Sorry You can not take a quiz, because there are no cards in the\n            deck\n          </Text>\n        </View>\n      ) : displayResult ? (\n        <View style={{ flex: 1 }}>\n          <View style={Styles.VerticalAlignCenter}>\n            <Text style={Styles.deckTexts}>\n              passed\n              {\" \" + JSON.stringify(fromDb.filter((s) => s === true).length)}/\n              {JSON.stringify(fromDb.length)}\n            </Text>\n            <View style={{ marginTop: 50 }}>\n            <TouchableOpacity onPress={handleReset}>\n              <Text style={Styles.button}>Restart Quiz</Text>\n            </TouchableOpacity>\n\n\n            <TouchableOpacity onPress={() => navigation.navigate(\"Deck\",{deck:deck.title})}>\n              <Text\n                style={[Styles.button, { color: \"gray\", borderColor: \"gray\" }]}\n              >\n                Back to Deck\n              </Text>\n            </TouchableOpacity>\n          </View>\n          </View>\n        </View>\n      ) : (\n        <View style={{ flex: 1 }}>\n          <Text>\n            {index + 1}/{QuestionList.length}\n          </Text>\n          <View style={Styles.VerticalAlignCenter}>\n            {displayQuestion ? (\n              <Text style={Styles.deckTexts}>{selectedQuestion.question}</Text>\n            ) : (\n              <Text style={Styles.deckTexts}>{selectedQuestion.answer}</Text>\n            )}\n            <TouchableOpacity\n              onPress={() => setDisplayQuestion(!displayQuestion)}\n            >\n              {displayQuestion ? (\n                <Text style={Styles.subButton}>Answer</Text>\n              ) : (\n                <Text style={Styles.subButton}>question</Text>\n              )}\n            </TouchableOpacity>\n          </View>\n          <View style={{ marginBottom: 50 }}>\n            <TouchableOpacity onPress={() => handleAnswer(true)}>\n              <Text style={Styles.button}>Correct</Text>\n            </TouchableOpacity>\n            <TouchableOpacity onPress={() => handleAnswer(false)}>\n              <Text\n                style={[Styles.button, { color: \"red\", borderColor: \"red\" }]}\n              >\n                Incorrect\n              </Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      )}\n    </View>\n  );\n};\n\nexport default StartQuiz;"]},"metadata":{},"sourceType":"module"}